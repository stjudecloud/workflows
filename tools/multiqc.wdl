version 1.1

task multiqc {
    meta {
        description: "Generates a MultiQC quality control metrics report summary from input QC result files"
        external_help: "https://docs.seqera.io/multiqc"
        outputs: {
            html: "HTML report generated by MultiQC",
            data: "Zipped archive of data compiled by MultiQC",
            log: "MultiQC log file. May be useful for debugging but is otherwise unimportant.",
        }
    }

    parameter_meta {
        files: "An array of files for MultiQC to compile into a report. Invalid files will be gracefully ignored by MultiQC."
        report_name: "A name for the MultiQC outputs: <report_name>.html and <report_name>_data.zip"
        config: "YAML file for configuring generated report"
        modify_disk_size_gb: "Add to or subtract from dynamic disk space allocation. Default disk size is determined by the size of the inputs. Specified in GB."
    }

    input {
        Array[File] files
        String report_name
        File? config
        Int modify_disk_size_gb = 0
    }

    Float input_size = size(files, "GiB")
    Int disk_size_gb = ceil(input_size) + 10 + modify_disk_size_gb

    command <<<
        set -euo pipefail

        >&2 whoami
        >&2 pwd
        >&2 ls -la
        touch file_list.txt

        echo '~{sep("\n", files)}' > file_list.txt

        # --strict is too strict. It causes errors due
        # to how our config adds 'custom-content' to the report.
        # Leaving this here as a warning not to try putting it back.
        # --require-logs might be useful at some point, but as of now,
        # it would cause errors. It could replace the check currently
        # run after multiqc is finished.
        multiqc -vz \
            ~{"-c '" + config + "'"} \
            --file-list file_list.txt \
            --data-dir \
            -n "~{report_name}"

        if [ ! -f "~{report_name}.html" ]; then
            >&2 echo "MultiQC didn't find any valid files!"
            exit 1
        fi

        mv "~{report_name}_data" "~{report_name}.log"
    >>>

    output {
        File html = report_name + ".html"
        File data = report_name + "_data.zip"
        File log = report_name + ".log"
    }

    runtime {
        memory: "4 GB"
        disks: "~{disk_size_gb} GB"
        container: "ghcr.io/multiqc/multiqc:v1.30"
        maxRetries: 1
    }
}
