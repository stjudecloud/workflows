## # Quality Check Standard
##
## This workflow runs a variety of quality checking software on any BAM file.
## It can be WGS, WES, or Transcriptome data. The results are aggregated and
## run through [MultiQC](https://multiqc.info/).
##
## ## LICENSING
## 
## #### MIT License
##
## Copyright 2020-Present St. Jude Children's Research Hospital
##
## Permission is hereby granted, free of charge, to any person obtaining a copy of this
## software and associated documentation files (the "Software"), to deal in the Software
## without restriction, including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
## to whom the Software is furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in all copies or
## substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
## BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
## NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
## DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

version 1.0

import "../../tools/md5sum.wdl"
import "../../tools/picard.wdl"
import "../../tools/mosdepth.wdl"
import "../../tools/samtools.wdl"
import "../../tools/fastqc.wdl" as fqc
import "../../tools/ngsderive.wdl"
import "../../tools/qualimap.wdl"
import "../../tools/fq.wdl"
import "../../tools/kraken.wdl"
import "../../tools/multiqc.wdl" as mqc
import "../../tools/util.wdl"

workflow quality_check {
    input {
        File bam
        File bam_index
        File reference_fasta
        File kraken_db
        File? gtf
        File? star_log
        String experiment
        String strandedness = ""
        Boolean paired_end = true
        Int max_retries = 1
    }

    parameter_meta {
        bam: "Input BAM format file to quality check"
        bam_index: "BAM index file corresponding to the input BAM"
        reference_fasta: "Reference genome in FASTA format"
        gtf: "GTF features file. **Required** for RNA-Seq data"
        star_log: "Log file generated by the RNA-Seq aligner STAR"
        experiment: "'WGS', 'WES', or 'RNA-Seq'"
        strandedness: "empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'. Only needed for RNA-Seq data. If missing, will be inferred"
        fastq_screen_db: "Database for FastQ Screen. **Required** for WGS and WES data. Can be generated using `make-qc-reference.wdl`. Must untar directly to genome directories."
        paired_end: "Whether the data is paired end"
        max_retries: "Number of times to retry failed steps"
    }

    String prefix = basename(bam, ".bam")
    String provided_strandedness = strandedness
    Boolean gtf_provided = defined(gtf)

    call parse_input {
        input:
            input_experiment=experiment,
            gtf_provided=gtf_provided,
            input_strand=provided_strandedness
    }

    call md5sum.compute_checksum { input: infile=bam, max_retries=max_retries }

    call picard.validate_bam { input: bam=bam, succeed_on_errors=true, ignore_list=[], summary_mode=true, max_retries=max_retries }
    call samtools.quickcheck { input: bam=bam, max_retries=max_retries }
    call util.compression_integrity { input: bam=bam, max_retries=max_retries }

    call picard.collect_alignment_summary_metrics { input: bam=quickcheck.checked_bam, max_retries=max_retries }
    call picard.collect_gc_bias_metrics { input: bam=quickcheck.checked_bam, reference_fasta=reference_fasta, max_retries=max_retries }
    call picard.collect_insert_size_metrics { input: bam=quickcheck.checked_bam, max_retries=max_retries }
    call picard.quality_score_distribution { input: bam=quickcheck.checked_bam, max_retries=max_retries }
    call samtools.flagstat as samtools_flagstat { input: bam=quickcheck.checked_bam, max_retries=max_retries }
    call fqc.fastqc { input: bam=quickcheck.checked_bam, max_retries=max_retries }
    call ngsderive.instrument as ngsderive_instrument { input: bam=quickcheck.checked_bam, max_retries=max_retries }
    call ngsderive.read_length as ngsderive_read_length { input: bam=quickcheck.checked_bam, bai=bam_index, max_retries=max_retries }
    call ngsderive.encoding as ngsderive_encoding { input: ngs_files=[quickcheck.checked_bam], prefix=prefix, max_retries=max_retries }

    call picard.bam_to_fastq { input: bam=quickcheck.checked_bam, max_retries=max_retries }
    call fq.fqlint { input: read1=bam_to_fastq.read1, read2=bam_to_fastq.read2, max_retries=max_retries }
    call kraken.kraken as run_kraken { 
        input:
            read1=fqlint.validated_read1,
            read2=select_first([fqlint.validated_read2, ""]),
            db=kraken_db,
            max_retries=max_retries
    }

    if (experiment == "WGS") {
        call picard.collect_wgs_metrics { input: bam=quickcheck.checked_bam, reference_fasta=reference_fasta, max_retries=max_retries }
        call mosdepth.coverage { input: bam=quickcheck.checked_bam, bai=bam_index, max_retries=max_retries }
    }

    if (experiment == "RNA-Seq") {
        File gtf_defined = select_first([gtf, "No GTF"])

        call ngsderive.junction_annotation as junction_annotation { input: bam=quickcheck.checked_bam, bai=bam_index, gtf=gtf_defined, max_retries=max_retries }

        call ngsderive.infer_strandedness as ngsderive_strandedness { input: bam=quickcheck.checked_bam, bai=bam_index, gtf=gtf_defined, max_retries=max_retries }
        String parsed_strandedness = read_string(ngsderive_strandedness.strandedness)

        call picard.sort as picard_sort { input: bam=quickcheck.checked_bam, sort_order="queryname", max_retries=max_retries }
        call qualimap.rnaseq as qualimap_rnaseq { input: bam=picard_sort.sorted_bam, gtf=gtf_defined, provided_strandedness=provided_strandedness, inferred_strandedness=parsed_strandedness, name_sorted=true, paired_end=paired_end, max_retries=max_retries }
    }
    
    call mqc.multiqc { input:
        input_files=select_all([
            validate_bam.out,
            samtools_flagstat.outfile,
            ngsderive_instrument.instrument_file,
            ngsderive_read_length.read_length_file,
            ngsderive_encoding.encoding_file,
            fastqc.raw_data,
            collect_alignment_summary_metrics.alignment_metrics,
            collect_gc_bias_metrics.gc_bias_metrics,
            collect_insert_size_metrics.insert_size_metrics,
            quality_score_distribution.quality_score_distribution_txt,
            run_kraken.report,
            coverage.summary,
            coverage.global_dist,
            collect_wgs_metrics.wgs_metrics,
            star_log,
            ngsderive_strandedness.strandedness_file,
            junction_annotation.junction_summary,
            qualimap_rnaseq.raw_summary,
            qualimap_rnaseq.raw_coverage
        ]),
        output_prefix=basename(bam, '.bam'),
        extra_fn_clean_exts=[".ValidateSamFile"],
        max_retries=max_retries
    }

    output {
        File bam_checksum = compute_checksum.outfile
        File validate_sam_file = validate_bam.out
        File flagstat = samtools_flagstat.outfile
        File fastqc_results = fastqc.results
        File instrument_file = ngsderive_instrument.instrument_file
        File read_length_file = ngsderive_read_length.read_length_file
        File inferred_encoding = ngsderive_encoding.encoding_file
        File alignment_metrics = collect_alignment_summary_metrics.alignment_metrics
        File alignment_metrics_pdf = collect_alignment_summary_metrics.alignment_metrics_pdf
        File gc_bias_metrics = collect_gc_bias_metrics.gc_bias_metrics
        File gc_bias_metrics_pdf = collect_gc_bias_metrics.gc_bias_metrics_pdf
        File insert_size_metrics = collect_insert_size_metrics.insert_size_metrics
        File insert_size_metrics_pdf = collect_insert_size_metrics.insert_size_metrics_pdf
        File quality_score_distribution_txt = quality_score_distribution.quality_score_distribution_txt
        File quality_score_distribution_pdf = quality_score_distribution.quality_score_distribution_pdf
        File kraken_report = run_kraken.report
        File multiqc_zip = multiqc.out
        File? wgs_metrics = collect_wgs_metrics.wgs_metrics
        File? mosdepth_global_dist = coverage.global_dist
        File? mosdepth_summary = coverage.summary
        File? inferred_strandedness = ngsderive_strandedness.strandedness_file
        File? qualimap_rnaseq_results = qualimap_rnaseq.results
        File? junction_summary = junction_annotation.junction_summary
        File? junctions = junction_annotation.junctions
        File? kraken_sequences = run_kraken.sequences
    }
}

task parse_input {
    input {
        String input_experiment
        Boolean gtf_provided
        String input_strand
    }

    String no_gtf = if gtf_provided then "" else "true"

    command <<<
        EXITCODE=0
        if [ "~{input_experiment}" != "WGS" ] && [ "~{input_experiment}" != "WES" ] && [ "~{input_experiment}" != "RNA-Seq" ]; then
            >&2 echo "experiment input must be 'WGS', 'WES', or 'RNA-Seq'"
            EXITCODE=1
        fi

        if [ "~{input_experiment}" = "RNA-Seq" ] && [ "~{no_gtf}" = "true" ]; then
            >&2 echo "Must supply a GTF if experiment = 'RNA-Seq'"
            EXITCODE=1
        fi

        if [ -n "~{input_strand}" ] && [ "~{input_strand}" != "Stranded-Reverse" ] && [ "~{input_strand}" != "Stranded-Forward" ] && [ "~{input_strand}" != "Unstranded" ]; then
            >&2 echo "strandedness must be empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'"
            EXITCODE=1
        fi

        exit $EXITCODE
    >>>

    runtime {
        memory: "1 GB"
        disk: "1 GB"
        docker: 'ghcr.io/stjudecloud/util:1.2.0'
    }

    output {
        String input_check = "passed"
    }
}
