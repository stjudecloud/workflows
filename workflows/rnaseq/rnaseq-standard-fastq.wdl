## # RNA-Seq Standard from FastQ
##
## This WDL workflow runs the STAR RNA-Seq alignment workflow for St. Jude Cloud from fastq input.
## The workflow takes paired input fastq files. 
## The read pairs are then passed through STAR alignment to generate a BAM file. The BAM is run
## through several QC steps. Quantification is done using htseq-count. 
##
## ## LICENSING
##
## #### MIT License
##
## Copyright 2020-Present St. Jude Children's Research Hospital
##
## Permission is hereby granted, free of charge, to any person obtaining a copy of this
## software and associated documentation files (the "Software"), to deal in the Software
## without restriction, including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
## to whom the Software is furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in all copies or
## substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
## BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
## NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
## DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

version 1.0

import "../../tools/fq.wdl"
import "./rnaseq-core.wdl" as rna_core

workflow rnaseq_standard_fastq {
    input {
        Array[File] read_one_fastqs
        Array[File] read_two_fastqs
        String read_groups
        String output_prefix
        File gtf
        File stardb
        File? contaminant_stardb
        String strandedness = ""
        Boolean cleanse_xenograft = false
        Boolean validate_input = true
        Boolean detect_nproc = false
        Int max_retries = 1
    }

    parameter_meta {
        read_one_fastqs: "Input Fastq format file(s) with 1st read in pair to align"
        read_two_fastqs: "Input Fastq format file(s) with 2nd read in pair to align"
        output_prefix: "Prefix for output files"
        read_groups: "A space-delimited read group record for each read group. Exactly one fastq filename must match each read group ID from `read_one_fastqs` and `read_two_fastqs`. Read group fields (Required fields: ID, LB, PL, PU, & SM.) should be space delimited. Read groups should be comma separated, with a space on each side (e.g. ' , '). The ID field must come first for each read group and must match the basename of a fastq file (up to the first period). Expected form: `ID:rg1 PU:flowcell1.lane1 SM:sample1 PL:illumina LB:sample1_lib1 , ID:rg2 PU:flowcell1.lane2 SM:sample1 PL:illumina LB:sample1_lib1`"
        strandedness: "empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'. If missing, will be inferred"
        gtf: "GTF feature file"
        stardb: "Database of reference files for the STAR aligner. Can be generated by `star-db-build.wdl`"
        contaminant_stardb: "If using XenoCP to clean contaminant reads, provide a STAR reference for the contaminant genome"
        cleanse_xenograft: "For xenograft samples, enable XenoCP cleansing of mouse contamination"
        detect_nproc: "Use all available cores for multi-core steps"
        max_retries: "Number of times to retry failed steps"
    }

    call parse_input { input:
        input_strand=strandedness,
        cleanse_xenograft=cleanse_xenograft,
        contaminant_stardb=defined(contaminant_stardb)
    }

    if (validate_input){
        scatter (reads in zip(read_one_fastqs, read_two_fastqs)) {
            call fq.fqlint { input: read1=reads.left, read2=reads.right, max_retries=max_retries }
        }
    }

    call rna_core.rnaseq_core { input:
        read_one_fastqs=read_one_fastqs,
        read_two_fastqs=read_two_fastqs,
        read_groups=read_groups,
        output_prefix=output_prefix,
        gtf=gtf,
        stardb=stardb,
        contaminant_stardb=contaminant_stardb,
        strandedness=strandedness,
        cleanse_xenograft=cleanse_xenograft,
        detect_nproc=detect_nproc,
        max_retries=max_retries
    }

    output {
        File bam = rnaseq_core.bam
        File bam_index = rnaseq_core.bam_index
        File bam_checksum = rnaseq_core.bam_checksum
        File star_log = rnaseq_core.star_log
        File gene_counts = rnaseq_core.gene_counts
        File inferred_strandedness = rnaseq_core.inferred_strandedness
        File bigwig = rnaseq_core.bigwig
    }
}

task parse_input {
    input {
        String input_strand
        Boolean cleanse_xenograft
        Boolean contaminant_stardb
    }

    command {
        if [ -n "~{input_strand}" ] && [ "~{input_strand}" != "Stranded-Reverse" ] && [ "~{input_strand}" != "Stranded-Forward" ] && [ "~{input_strand}" != "Unstranded" ]; then
            >&2 echo "strandedness must be empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'"
            exit 1
        fi
        if [ "~{cleanse_xenograft}" == "true" ] && [ "~{contaminant_stardb}" == "false" ]
        then
            >&2 echo "contaminant_stardb must be supplied if cleanse_xenograft is specified"
            exit 1
        fi
    }

    runtime {
        memory: "4 GB"
        disk: "1 GB"
        docker: 'ghcr.io/stjudecloud/util:1.2.0'
    }

    output {
        String input_check = "passed"
    }
}
