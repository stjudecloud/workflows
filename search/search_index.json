{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This repository contains all bioinformatics workflows used on the St. Jude Cloud project. Officially, the repository is in beta \u2014 the project is adding workflows as they are developed and put into production. \ud83c\udfe0 Homepage Getting Started At the time of writing, all workflows are written in WDL and are tested using Cromwell . We use Oliver to easily interact with the Cromwell server to perform various tasks. Although we do not test outside of Cromwell, we expect that the workflows will work just as well using other runners. The easiest way to get started is to install bioconda and the run the following commands: conda create -n workflows-dev -c conda-forge cromwell -y conda activate workflows-dev git clone git@github.com:stjudecloud/workflows.git cd workflows Any of the workflows in the workflows folder is a good place to start, e.g. cromwell run workflows/reference/bootstrap-reference.wdl --inputs workflows/reference/inputs.json Repository Structure The repository is laid out as follows: bin - Scripts used by Cromwell configuration settings. Add this to $PATH prior to using configurations in conf with Cromwell. conf - Cromwell configuration files created for various environments that we use across our team. Feel free to use/fork/suggest improvements. docker - Dockerfiles used in our workflows. All docker images are published to Docker Hub as a part of our CI and are versioned. tools - All tools we have wrapped as individual WDL tasks. workflows - Directory containing all end-to-end bioinformatics workflows. Workflows Available The current workflows exist in this repo with the following statuses: Name Version Description Specification Workflow Status RNA-Seq Standard v2.0.0 Standard RNA-Seq harmonization pipeline. Specification Realign BAM Workflow , FastQ Workflow Build STAR References N/A Build STAR aligner reference files used in RNA-Seq Standard harmonization pipelines. None Workflow Quality Check Standard v1.0.0 Perform ~10 different QC analyses on a BAM file and compile the results using MultiQC . Specification Workflow Build FastQ Screen References N/A Build references used in WGS/WES Quality Check pipeline for running FastQ Screen . None Workflow ESTIMATE v1.0.0 ( beta ) Runs the ESTIMATE software package on a feature counts file. None Workflow Calculate Gene Lengths N/A Produces a gene length file from a GTF. None Workflow Build BWA References N/A Builds reference files used by the BWA aligner . None Workflow BAM to FastQs v1.0.0 Split a BAM file into read groups, then read 1 FastQs and read 2 FastQs. None Workflow Author \ud83d\udc64 St. Jude Cloud Team Website: https://stjude.cloud Github: @stjudecloud Twitter: @StJudeResearch Tests Given that this repo is still new, there are no tests. When we add tests, we will update the README. \ud83e\udd1d Contributing Contributions, issues and feature requests are welcome! Feel free to check issues page . You can also take a look at the contributing guide . \ud83d\udcdd License Copyright \u00a9 2020-Present St. Jude Cloud Team . This project is MIT licensed.","title":"Home"},{"location":"#homepage","text":"","title":"\ud83c\udfe0 Homepage"},{"location":"#getting-started","text":"At the time of writing, all workflows are written in WDL and are tested using Cromwell . We use Oliver to easily interact with the Cromwell server to perform various tasks. Although we do not test outside of Cromwell, we expect that the workflows will work just as well using other runners. The easiest way to get started is to install bioconda and the run the following commands: conda create -n workflows-dev -c conda-forge cromwell -y conda activate workflows-dev git clone git@github.com:stjudecloud/workflows.git cd workflows Any of the workflows in the workflows folder is a good place to start, e.g. cromwell run workflows/reference/bootstrap-reference.wdl --inputs workflows/reference/inputs.json","title":"Getting Started"},{"location":"#repository-structure","text":"The repository is laid out as follows: bin - Scripts used by Cromwell configuration settings. Add this to $PATH prior to using configurations in conf with Cromwell. conf - Cromwell configuration files created for various environments that we use across our team. Feel free to use/fork/suggest improvements. docker - Dockerfiles used in our workflows. All docker images are published to Docker Hub as a part of our CI and are versioned. tools - All tools we have wrapped as individual WDL tasks. workflows - Directory containing all end-to-end bioinformatics workflows.","title":"Repository Structure"},{"location":"#workflows-available","text":"The current workflows exist in this repo with the following statuses: Name Version Description Specification Workflow Status RNA-Seq Standard v2.0.0 Standard RNA-Seq harmonization pipeline. Specification Realign BAM Workflow , FastQ Workflow Build STAR References N/A Build STAR aligner reference files used in RNA-Seq Standard harmonization pipelines. None Workflow Quality Check Standard v1.0.0 Perform ~10 different QC analyses on a BAM file and compile the results using MultiQC . Specification Workflow Build FastQ Screen References N/A Build references used in WGS/WES Quality Check pipeline for running FastQ Screen . None Workflow ESTIMATE v1.0.0 ( beta ) Runs the ESTIMATE software package on a feature counts file. None Workflow Calculate Gene Lengths N/A Produces a gene length file from a GTF. None Workflow Build BWA References N/A Builds reference files used by the BWA aligner . None Workflow BAM to FastQs v1.0.0 Split a BAM file into read groups, then read 1 FastQs and read 2 FastQs. None Workflow","title":"Workflows Available"},{"location":"#author","text":"\ud83d\udc64 St. Jude Cloud Team Website: https://stjude.cloud Github: @stjudecloud Twitter: @StJudeResearch","title":"Author"},{"location":"#tests","text":"Given that this repo is still new, there are no tests. When we add tests, we will update the README.","title":"Tests"},{"location":"#contributing","text":"Contributions, issues and feature requests are welcome! Feel free to check issues page . You can also take a look at the contributing guide .","title":"\ud83e\udd1d Contributing"},{"location":"#license","text":"Copyright \u00a9 2020-Present St. Jude Cloud Team . This project is MIT licensed.","title":"\ud83d\udcdd License"},{"location":"build_for_dnanexus/","text":"Building WDL workflows for DNAnexus Obtain dxWDL JAR Retrieve the latest dxWDL JAR release from GitHub: https://github.com/dnanexus/dxWDL/releases Optional workflow parameters for dxWDL -project - Specify a project to compile the workflow. This is optional and otherwise uses the currently selected project. -archive - Archive older versions of the workflow and applets -defaults - Set default options for certain parameters -verbose - Detailed build information -locked - Creates a one stage worklfow that is cleaner in the interface -extras - JSON formatted file with options primarily for the DNAnexus platform settings Build Interactive t-SNE workflow for DNAnexus Commands for building the t-SNE workflows are included below. Your version of dxWDL may differ from the version included below. Several optional parameters are included. -defaults specifies DNAnexus paths to reference data for the workflow. -extras specifies that tasks should be retried by default on failure. Build workflow running htseq-count on BAM input java -jar dxWDL-v1.46.2.jar compile workflows/interactive-tsne/interactive_tsne_from_bams.wdl -project project-FjFfvV89F80QvvxJ8131yzpB -archive -verbose -defaults workflows/interactive-tsne/inputs/defaults_bam.json -extras workflows/interactive-tsne/inputs/extras.json -locked Build workflow from HTSeq counts data java -jar dxWDL-v1.46.2.jar compile workflows/interactive-tsne/interactive_tsne_from_counts.wdl -project project-FjFfvV89F80QvvxJ8131yzpB -archive -verbose -defaults workflows/interactive-tsne/inputs/defaults_counts.json -extras workflows/interactive-tsne/inputs/extras.json -locked Build workflow with RNA-Seq V2 remapping of BAM input java -jar dxWDL-v1.46.2.jar compile workflows/interactive-tsne/interactive-tsne.wdl -project project-FjFfvV89F80QvvxJ8131yzpB -archive -verbose -defaults workflows/interactive-tsne/inputs/defaults.json -extras workflows/interactive-tsne/inputs/extras.json -locked","title":"Building WDL workflows for DNAnexus"},{"location":"build_for_dnanexus/#building-wdl-workflows-for-dnanexus","text":"","title":"Building WDL workflows for DNAnexus"},{"location":"build_for_dnanexus/#obtain-dxwdl-jar","text":"Retrieve the latest dxWDL JAR release from GitHub: https://github.com/dnanexus/dxWDL/releases","title":"Obtain dxWDL JAR"},{"location":"build_for_dnanexus/#optional-workflow-parameters-for-dxwdl","text":"-project - Specify a project to compile the workflow. This is optional and otherwise uses the currently selected project. -archive - Archive older versions of the workflow and applets -defaults - Set default options for certain parameters -verbose - Detailed build information -locked - Creates a one stage worklfow that is cleaner in the interface -extras - JSON formatted file with options primarily for the DNAnexus platform settings","title":"Optional workflow parameters for dxWDL"},{"location":"build_for_dnanexus/#build-interactive-t-sne-workflow-for-dnanexus","text":"Commands for building the t-SNE workflows are included below. Your version of dxWDL may differ from the version included below. Several optional parameters are included. -defaults specifies DNAnexus paths to reference data for the workflow. -extras specifies that tasks should be retried by default on failure.","title":"Build Interactive t-SNE workflow for DNAnexus"},{"location":"build_for_dnanexus/#build-workflow-running-htseq-count-on-bam-input","text":"java -jar dxWDL-v1.46.2.jar compile workflows/interactive-tsne/interactive_tsne_from_bams.wdl -project project-FjFfvV89F80QvvxJ8131yzpB -archive -verbose -defaults workflows/interactive-tsne/inputs/defaults_bam.json -extras workflows/interactive-tsne/inputs/extras.json -locked","title":"Build workflow running htseq-count on BAM input"},{"location":"build_for_dnanexus/#build-workflow-from-htseq-counts-data","text":"java -jar dxWDL-v1.46.2.jar compile workflows/interactive-tsne/interactive_tsne_from_counts.wdl -project project-FjFfvV89F80QvvxJ8131yzpB -archive -verbose -defaults workflows/interactive-tsne/inputs/defaults_counts.json -extras workflows/interactive-tsne/inputs/extras.json -locked","title":"Build workflow from HTSeq counts data"},{"location":"build_for_dnanexus/#build-workflow-with-rna-seq-v2-remapping-of-bam-input","text":"java -jar dxWDL-v1.46.2.jar compile workflows/interactive-tsne/interactive-tsne.wdl -project project-FjFfvV89F80QvvxJ8131yzpB -archive -verbose -defaults workflows/interactive-tsne/inputs/defaults.json -extras workflows/interactive-tsne/inputs/extras.json -locked","title":"Build workflow with RNA-Seq V2 remapping of BAM input"},{"location":"tasks/bwa/","text":"BWA This WDL tool wraps BWA . BWA aligns sequencing reads to a reference genome. bwa_aln author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool maps single-end fastq files to BAM format using bwa aln. Inputs Required bwadb_tar_gz (File, required ): Gzipped tar archive of the bwa reference files. Files should be at the root of the archive. fastq (File, required ): Input FastQ file to align with bwa Optional disk_size_gb (Int?) Defaults detect_nproc (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=5) ncpu (Int, default=1) output_bam (String, default=basename(fastq,\".fq.gz\") + \".bam\") read_group (String, default=\"\") Outputs bam (File) bwa_aln_pe author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool maps paired-end fastq files to BAM format using bwa aln. Inputs Required bwadb_tar_gz (File, required ): Gzipped tar archive of the bwa reference files. Files should be at the root of the archive. fastq1 (File, required ): Input FastQ read 1 file to align with bwa fastq2 (File, required ): Input FastQ read 2 file to align with bwa Optional disk_size_gb (Int?) Defaults detect_nproc (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=5) ncpu (Int, default=1) output_bam (String, default=basename(fastq1,\".fq.gz\") + \".bam\") read_group (String, default=\"\") Outputs bam (File) bwa_mem author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool maps fastq files to BAM format using bwa mem. Inputs Required bwadb_tar_gz (File, required ): Gzipped tar archive of the bwa reference files. Files should be at the root of the archive. fastq (File, required ): Input FastQ file to align with bwa Optional disk_size_gb (Int?) Defaults detect_nproc (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=5) ncpu (Int, default=1) output_bam (String, default=basename(fastq,\".fq.gz\") + \".bam\") read_group (String, default=\"\") Outputs bam (File) build_bwa_db author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool creates a BWA index and returns it as a compressed tar archive. Inputs Required reference_fasta (File, required ): Input reference Fasta file to index with bwa. Should be compressed with gzip. Optional disk_size_gb (Int?) Defaults bwadb_out_name (String, default=\"bwadb.tar.gz\"): Name for the output gzipped tar archive of the bwa reference files. max_retries (Int, default=1) memory_gb (Int, default=5) Outputs bwadb_tar_gz (File) format_rg_for_bwa author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool converts read group records from the BAM-formatted strings to strings expected by bwa. Inputs Required read_group (String, required ): Read group string Outputs formatted_rg (String)","title":"BWA"},{"location":"tasks/bwa/#bwa","text":"This WDL tool wraps BWA . BWA aligns sequencing reads to a reference genome.","title":"BWA"},{"location":"tasks/bwa/#bwa_aln","text":"author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool maps single-end fastq files to BAM format using bwa aln.","title":"bwa_aln"},{"location":"tasks/bwa/#inputs","text":"","title":"Inputs"},{"location":"tasks/bwa/#required","text":"bwadb_tar_gz (File, required ): Gzipped tar archive of the bwa reference files. Files should be at the root of the archive. fastq (File, required ): Input FastQ file to align with bwa","title":"Required"},{"location":"tasks/bwa/#optional","text":"disk_size_gb (Int?)","title":"Optional"},{"location":"tasks/bwa/#defaults","text":"detect_nproc (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=5) ncpu (Int, default=1) output_bam (String, default=basename(fastq,\".fq.gz\") + \".bam\") read_group (String, default=\"\")","title":"Defaults"},{"location":"tasks/bwa/#outputs","text":"bam (File)","title":"Outputs"},{"location":"tasks/bwa/#bwa_aln_pe","text":"author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool maps paired-end fastq files to BAM format using bwa aln.","title":"bwa_aln_pe"},{"location":"tasks/bwa/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/bwa/#required_1","text":"bwadb_tar_gz (File, required ): Gzipped tar archive of the bwa reference files. Files should be at the root of the archive. fastq1 (File, required ): Input FastQ read 1 file to align with bwa fastq2 (File, required ): Input FastQ read 2 file to align with bwa","title":"Required"},{"location":"tasks/bwa/#optional_1","text":"disk_size_gb (Int?)","title":"Optional"},{"location":"tasks/bwa/#defaults_1","text":"detect_nproc (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=5) ncpu (Int, default=1) output_bam (String, default=basename(fastq1,\".fq.gz\") + \".bam\") read_group (String, default=\"\")","title":"Defaults"},{"location":"tasks/bwa/#outputs_1","text":"bam (File)","title":"Outputs"},{"location":"tasks/bwa/#bwa_mem","text":"author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool maps fastq files to BAM format using bwa mem.","title":"bwa_mem"},{"location":"tasks/bwa/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/bwa/#required_2","text":"bwadb_tar_gz (File, required ): Gzipped tar archive of the bwa reference files. Files should be at the root of the archive. fastq (File, required ): Input FastQ file to align with bwa","title":"Required"},{"location":"tasks/bwa/#optional_2","text":"disk_size_gb (Int?)","title":"Optional"},{"location":"tasks/bwa/#defaults_2","text":"detect_nproc (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=5) ncpu (Int, default=1) output_bam (String, default=basename(fastq,\".fq.gz\") + \".bam\") read_group (String, default=\"\")","title":"Defaults"},{"location":"tasks/bwa/#outputs_2","text":"bam (File)","title":"Outputs"},{"location":"tasks/bwa/#build_bwa_db","text":"author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool creates a BWA index and returns it as a compressed tar archive.","title":"build_bwa_db"},{"location":"tasks/bwa/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/bwa/#required_3","text":"reference_fasta (File, required ): Input reference Fasta file to index with bwa. Should be compressed with gzip.","title":"Required"},{"location":"tasks/bwa/#optional_3","text":"disk_size_gb (Int?)","title":"Optional"},{"location":"tasks/bwa/#defaults_3","text":"bwadb_out_name (String, default=\"bwadb.tar.gz\"): Name for the output gzipped tar archive of the bwa reference files. max_retries (Int, default=1) memory_gb (Int, default=5)","title":"Defaults"},{"location":"tasks/bwa/#outputs_3","text":"bwadb_tar_gz (File)","title":"Outputs"},{"location":"tasks/bwa/#format_rg_for_bwa","text":"author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool converts read group records from the BAM-formatted strings to strings expected by bwa.","title":"format_rg_for_bwa"},{"location":"tasks/bwa/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/bwa/#required_4","text":"read_group (String, required ): Read group string","title":"Required"},{"location":"tasks/bwa/#outputs_4","text":"formatted_rg (String)","title":"Outputs"},{"location":"tasks/cellranger/","text":"Cell Ranger This WDL tool wrap the 10x Genomics Cell Ranger tool. Cell Ranger is a tool for handling scRNA-Seq data. count author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool runs Cell Ranger count to generate an aligned BAM and feature counts from scRNA-Seq data. Inputs Required fastqs_tar_gz (File, required ): Path to the fastq folder archive in .tar.gz format id (String, required ): A unique run ID sample_id (String, required ): Sample name as used by cellranger mkfastq transcriptome_tar_gz (File, required ): Path to Cell Ranger-compatible transcriptome reference in .tar.gz format Defaults cpu (Int, default=8) detect_nproc (Boolean, default=false) jobmode (String, default=\"local\") max_retries (Int, default=1) memory_gb (Int, default=16) Outputs bam (File) bam_index (File) qc (File) barcodes (File) features (File) matrix (File) filtered_gene_h5 (File) raw_gene_h5 (File) raw_barcodes (File) raw_features (File) raw_matrix (File) mol_info_h5 (File) web_summary (File) loupe (File) bamtofastq author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool runs the 10x bamtofastq tool to convert Cell Ranger generated BAM files back to fastq files Inputs Required bam (File, required ): Input BAM to convert to Cell Ranger compatible fastqs Defaults cellranger11 (Boolean, default=false): Convert a BAM produced by Cell Ranger 1.0-1.1 gemcode (Boolean, default=false): Convert a BAM produced from GemCode data (Longranger 1.0 - 1.3) longranger20 (Boolean, default=false): Convert a BAM produced by Longranger 2.0 max_retries (Int, default=1) memory_gb (Int, default=8) ncpu (Int, default=4) Outputs fastqs (Array[File]) fastqs_archive (File) read1 (Array[File]) read2 (Array[File])","title":"Cellranger"},{"location":"tasks/cellranger/#count","text":"author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool runs Cell Ranger count to generate an aligned BAM and feature counts from scRNA-Seq data.","title":"count"},{"location":"tasks/cellranger/#inputs","text":"","title":"Inputs"},{"location":"tasks/cellranger/#required","text":"fastqs_tar_gz (File, required ): Path to the fastq folder archive in .tar.gz format id (String, required ): A unique run ID sample_id (String, required ): Sample name as used by cellranger mkfastq transcriptome_tar_gz (File, required ): Path to Cell Ranger-compatible transcriptome reference in .tar.gz format","title":"Required"},{"location":"tasks/cellranger/#defaults","text":"cpu (Int, default=8) detect_nproc (Boolean, default=false) jobmode (String, default=\"local\") max_retries (Int, default=1) memory_gb (Int, default=16)","title":"Defaults"},{"location":"tasks/cellranger/#outputs","text":"bam (File) bam_index (File) qc (File) barcodes (File) features (File) matrix (File) filtered_gene_h5 (File) raw_gene_h5 (File) raw_barcodes (File) raw_features (File) raw_matrix (File) mol_info_h5 (File) web_summary (File) loupe (File)","title":"Outputs"},{"location":"tasks/cellranger/#bamtofastq","text":"author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool runs the 10x bamtofastq tool to convert Cell Ranger generated BAM files back to fastq files","title":"bamtofastq"},{"location":"tasks/cellranger/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/cellranger/#required_1","text":"bam (File, required ): Input BAM to convert to Cell Ranger compatible fastqs","title":"Required"},{"location":"tasks/cellranger/#defaults_1","text":"cellranger11 (Boolean, default=false): Convert a BAM produced by Cell Ranger 1.0-1.1 gemcode (Boolean, default=false): Convert a BAM produced from GemCode data (Longranger 1.0 - 1.3) longranger20 (Boolean, default=false): Convert a BAM produced by Longranger 2.0 max_retries (Int, default=1) memory_gb (Int, default=8) ncpu (Int, default=4)","title":"Defaults"},{"location":"tasks/cellranger/#outputs_1","text":"fastqs (Array[File]) fastqs_archive (File) read1 (Array[File]) read2 (Array[File])","title":"Outputs"},{"location":"tasks/deeptools/","text":"Deeptools This WDL tool wraps the DeepTools tool. DeepTools is a suite of Python tools for analysis of high throughput sequencing analysis. bamCoverage author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool generates a BigWig coverage track using bamCoverage from DeepTools (https://deeptools.readthedocs.io/en/develop/index.html). Inputs Required bai (File, required ): BAM index file corresponding to the input BAM bam (File, required ): Input BAM format file to generate coverage for Defaults detect_nproc (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=5) ncpu (Int, default=1) prefix (String, default=basename(bam,\".bam\")) Outputs bigwig (File)","title":"Deeptools"},{"location":"tasks/deeptools/#deeptools","text":"This WDL tool wraps the DeepTools tool. DeepTools is a suite of Python tools for analysis of high throughput sequencing analysis.","title":"Deeptools"},{"location":"tasks/deeptools/#bamcoverage","text":"author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool generates a BigWig coverage track using bamCoverage from DeepTools (https://deeptools.readthedocs.io/en/develop/index.html).","title":"bamCoverage"},{"location":"tasks/deeptools/#inputs","text":"","title":"Inputs"},{"location":"tasks/deeptools/#required","text":"bai (File, required ): BAM index file corresponding to the input BAM bam (File, required ): Input BAM format file to generate coverage for","title":"Required"},{"location":"tasks/deeptools/#defaults","text":"detect_nproc (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=5) ncpu (Int, default=1) prefix (String, default=basename(bam,\".bam\"))","title":"Defaults"},{"location":"tasks/deeptools/#outputs","text":"bigwig (File)","title":"Outputs"},{"location":"tasks/estimate/","text":"ESTIMATE This WDL tool wraps the ESTIMATE software package . calc_tpm Inputs Required counts (File, required ) gene_lengths (File, required ) Defaults max_retries (Int, default=1) outfile (String, default=basename(counts,\".feature-counts.txt\") + \".TPM.txt\") Outputs out (File) run_ESTIMATE Inputs Required gene_expression_file (File, required ) Defaults max_retries (Int, default=1) outfile (String, default=basename(gene_expression_file,\".TPM.txt\") + \".ESTIMATE.gct\") Outputs out (File)","title":"ESTIMATE"},{"location":"tasks/estimate/#estimate","text":"This WDL tool wraps the ESTIMATE software package .","title":"ESTIMATE"},{"location":"tasks/estimate/#calc_tpm","text":"","title":"calc_tpm"},{"location":"tasks/estimate/#inputs","text":"","title":"Inputs"},{"location":"tasks/estimate/#required","text":"counts (File, required ) gene_lengths (File, required )","title":"Required"},{"location":"tasks/estimate/#defaults","text":"max_retries (Int, default=1) outfile (String, default=basename(counts,\".feature-counts.txt\") + \".TPM.txt\")","title":"Defaults"},{"location":"tasks/estimate/#outputs","text":"out (File)","title":"Outputs"},{"location":"tasks/estimate/#run_estimate","text":"","title":"run_ESTIMATE"},{"location":"tasks/estimate/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/estimate/#required_1","text":"gene_expression_file (File, required )","title":"Required"},{"location":"tasks/estimate/#defaults_1","text":"max_retries (Int, default=1) outfile (String, default=basename(gene_expression_file,\".TPM.txt\") + \".ESTIMATE.gct\")","title":"Defaults"},{"location":"tasks/estimate/#outputs_1","text":"out (File)","title":"Outputs"},{"location":"tasks/fastq_screen/","text":"FastQ Screen Methods for bootstrapping and running FastQ Screen build_db author Clay McLeod, Andrew Frantz email clay.mcleod@STJUDE.org, andrew.frantz@stjude.org description This WDL tool downloads the FastQ Screen database and archives it. Inputs Defaults max_retries (Int, default=1) tar_filename (String, default=\"fastq-screen-db.tar.gz\") Outputs db (File) fastq_screen author Andrew Frantz, Clay McLeod email andrew.frantz@stjude.org, clay.mcleod@stjude.org description This WDL tool runs FastQ Screen on a sample. Exit code 42 indicates a rare intermittent bug. Job should succeed upon resubmission. Inputs Required db (File, required ): Database for FastQ Screen. Must untar directly to the genome directories. provided_encoding (String, required ) read1 (File, required ) read2 (File, required ) Optional sample_name (String?) Defaults inferred_encoding (String, default=\"\") max_retries (Int, default=1) num_reads (Int, default=0) Outputs results (File)","title":"FastQ Screen"},{"location":"tasks/fastq_screen/#fastq-screen","text":"Methods for bootstrapping and running FastQ Screen","title":"FastQ Screen"},{"location":"tasks/fastq_screen/#build_db","text":"author Clay McLeod, Andrew Frantz email clay.mcleod@STJUDE.org, andrew.frantz@stjude.org description This WDL tool downloads the FastQ Screen database and archives it.","title":"build_db"},{"location":"tasks/fastq_screen/#inputs","text":"","title":"Inputs"},{"location":"tasks/fastq_screen/#defaults","text":"max_retries (Int, default=1) tar_filename (String, default=\"fastq-screen-db.tar.gz\")","title":"Defaults"},{"location":"tasks/fastq_screen/#outputs","text":"db (File)","title":"Outputs"},{"location":"tasks/fastq_screen/#fastq_screen","text":"author Andrew Frantz, Clay McLeod email andrew.frantz@stjude.org, clay.mcleod@stjude.org description This WDL tool runs FastQ Screen on a sample. Exit code 42 indicates a rare intermittent bug. Job should succeed upon resubmission.","title":"fastq_screen"},{"location":"tasks/fastq_screen/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/fastq_screen/#required","text":"db (File, required ): Database for FastQ Screen. Must untar directly to the genome directories. provided_encoding (String, required ) read1 (File, required ) read2 (File, required )","title":"Required"},{"location":"tasks/fastq_screen/#optional","text":"sample_name (String?)","title":"Optional"},{"location":"tasks/fastq_screen/#defaults_1","text":"inferred_encoding (String, default=\"\") max_retries (Int, default=1) num_reads (Int, default=0)","title":"Defaults"},{"location":"tasks/fastq_screen/#outputs_1","text":"results (File)","title":"Outputs"},{"location":"tasks/fastqc/","text":"FastQC This WDL tool wraps the FastQC tool. FastQC generates quality control metrics for sequencing pipelines. fastqc author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates a FastQC quality control metrics report for the input BAM file. Inputs Required bam (File, required ): Input BAM format file to generate coverage for Defaults max_retries (Int, default=1) memory_gb (Int, default=5) ncpu (Int, default=1) Outputs results (File)","title":"FastQC"},{"location":"tasks/fastqc/#fastqc","text":"This WDL tool wraps the FastQC tool. FastQC generates quality control metrics for sequencing pipelines.","title":"FastQC"},{"location":"tasks/fastqc/#fastqc_1","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates a FastQC quality control metrics report for the input BAM file.","title":"fastqc"},{"location":"tasks/fastqc/#inputs","text":"","title":"Inputs"},{"location":"tasks/fastqc/#required","text":"bam (File, required ): Input BAM format file to generate coverage for","title":"Required"},{"location":"tasks/fastqc/#defaults","text":"max_retries (Int, default=1) memory_gb (Int, default=5) ncpu (Int, default=1)","title":"Defaults"},{"location":"tasks/fastqc/#outputs","text":"results (File)","title":"Outputs"},{"location":"tasks/fq/","text":"FQ This WDL tool wraps the fq tool . The fq library provides methods for manipulating Illumina generated FastQ files. fqlint author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool performs quality control on the input FastQ pairs to ensure proper formatting. Inputs Required read1 (File, required ): Input FastQ with read one Optional read2 (File?): Input FastQ with read two Defaults max_retries (Int, default=1) memory_gb (Int, default=8) Outputs validated_read1 (File) validated_read2 (File?)","title":"FQ"},{"location":"tasks/fq/#fq","text":"This WDL tool wraps the fq tool . The fq library provides methods for manipulating Illumina generated FastQ files.","title":"FQ"},{"location":"tasks/fq/#fqlint","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool performs quality control on the input FastQ pairs to ensure proper formatting.","title":"fqlint"},{"location":"tasks/fq/#inputs","text":"","title":"Inputs"},{"location":"tasks/fq/#required","text":"read1 (File, required ): Input FastQ with read one","title":"Required"},{"location":"tasks/fq/#optional","text":"read2 (File?): Input FastQ with read two","title":"Optional"},{"location":"tasks/fq/#defaults","text":"max_retries (Int, default=1) memory_gb (Int, default=8)","title":"Defaults"},{"location":"tasks/fq/#outputs","text":"validated_read1 (File) validated_read2 (File?)","title":"Outputs"},{"location":"tasks/htseq/","text":"HTSeq This WDL tool wraps the htseq tool. HTSeq is a Python library for analyzing sequencing data. count author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool performs read counting for a set of features in the input BAM file. Inputs Required bam (File, required ): Input BAM format file to generate coverage for gtf (File, required ): Input genomic features in GTF format to count reads for provided_strandedness (String, required ) Defaults added_memory_gb (Int, default=20): Amount of additional memory to add to the bam size inferred_strandedness (String, default=\"\") max_retries (Int, default=1) outfile (String, default=basename(bam,\".bam\") + \".feature-counts.txt\") Outputs out (File)","title":"HTSeq"},{"location":"tasks/htseq/#htseq","text":"This WDL tool wraps the htseq tool. HTSeq is a Python library for analyzing sequencing data.","title":"HTSeq"},{"location":"tasks/htseq/#count","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool performs read counting for a set of features in the input BAM file.","title":"count"},{"location":"tasks/htseq/#inputs","text":"","title":"Inputs"},{"location":"tasks/htseq/#required","text":"bam (File, required ): Input BAM format file to generate coverage for gtf (File, required ): Input genomic features in GTF format to count reads for provided_strandedness (String, required )","title":"Required"},{"location":"tasks/htseq/#defaults","text":"added_memory_gb (Int, default=20): Amount of additional memory to add to the bam size inferred_strandedness (String, default=\"\") max_retries (Int, default=1) outfile (String, default=basename(bam,\".bam\") + \".feature-counts.txt\")","title":"Defaults"},{"location":"tasks/htseq/#outputs","text":"out (File)","title":"Outputs"},{"location":"tasks/md5sum/","text":"This WDL tool wraps the md5sum tool from the GNU core utilities . md5sum is a utility for generating and verifying MD5 hashes. compute_checksum author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates an MD5 checksum for the input file. Inputs Required infile (File, required ): Input file to generate MD5 checksum Defaults max_retries (Int, default=1) memory_gb (Int, default=5) Outputs outfile (File) check_checksum author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool checks a list of MD5 checksums against the corresponding files to verify integrity Inputs Required infile (File, required ): Input file containing checksums to check Defaults max_retries (Int, default=1) Outputs out (File)","title":"Md5sum"},{"location":"tasks/md5sum/#compute_checksum","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates an MD5 checksum for the input file.","title":"compute_checksum"},{"location":"tasks/md5sum/#inputs","text":"","title":"Inputs"},{"location":"tasks/md5sum/#required","text":"infile (File, required ): Input file to generate MD5 checksum","title":"Required"},{"location":"tasks/md5sum/#defaults","text":"max_retries (Int, default=1) memory_gb (Int, default=5)","title":"Defaults"},{"location":"tasks/md5sum/#outputs","text":"outfile (File)","title":"Outputs"},{"location":"tasks/md5sum/#check_checksum","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool checks a list of MD5 checksums against the corresponding files to verify integrity","title":"check_checksum"},{"location":"tasks/md5sum/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/md5sum/#required_1","text":"infile (File, required ): Input file containing checksums to check","title":"Required"},{"location":"tasks/md5sum/#defaults_1","text":"max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/md5sum/#outputs_1","text":"out (File)","title":"Outputs"},{"location":"tasks/multiqc/","text":"MultiQC This WDL tool wraps the MultiQC tool. MultiQC aggregates quality control results for bioinformatics. multiqc author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates a MultiQC quality control metrics report summary from input QC result files. Inputs Required encoding_file (File, required ) fastqc (File, required ): Tarballed directory of files output by FastQC flagstat_file (File, required ): A file containing the output of Samtools' flagstat command for the input BAM file instrument_file (File, required ) read_length_file (File, required ) validate_sam_file (File, required ): A file output from Picard's ValidateSam tool Optional fastq_screen (File?): Tarballed directory of files output by FastQ Screen junction_annotation (File?) qualimap_bamqc (File?): Tarballed directory of files output by Qualimap's BamQC mode qualimap_rnaseq (File?): Tarballed directory of files output by Qualimap's RNA-seq mode star_log (File?): The log file of a STAR alignment run strandedness_file (File?) Defaults disk_size (Int, default=20) max_retries (Int, default=1) memory_gb (Int, default=5) Outputs out (File)","title":"MultiQC"},{"location":"tasks/multiqc/#multiqc","text":"This WDL tool wraps the MultiQC tool. MultiQC aggregates quality control results for bioinformatics.","title":"MultiQC"},{"location":"tasks/multiqc/#multiqc_1","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates a MultiQC quality control metrics report summary from input QC result files.","title":"multiqc"},{"location":"tasks/multiqc/#inputs","text":"","title":"Inputs"},{"location":"tasks/multiqc/#required","text":"encoding_file (File, required ) fastqc (File, required ): Tarballed directory of files output by FastQC flagstat_file (File, required ): A file containing the output of Samtools' flagstat command for the input BAM file instrument_file (File, required ) read_length_file (File, required ) validate_sam_file (File, required ): A file output from Picard's ValidateSam tool","title":"Required"},{"location":"tasks/multiqc/#optional","text":"fastq_screen (File?): Tarballed directory of files output by FastQ Screen junction_annotation (File?) qualimap_bamqc (File?): Tarballed directory of files output by Qualimap's BamQC mode qualimap_rnaseq (File?): Tarballed directory of files output by Qualimap's RNA-seq mode star_log (File?): The log file of a STAR alignment run strandedness_file (File?)","title":"Optional"},{"location":"tasks/multiqc/#defaults","text":"disk_size (Int, default=20) max_retries (Int, default=1) memory_gb (Int, default=5)","title":"Defaults"},{"location":"tasks/multiqc/#outputs","text":"out (File)","title":"Outputs"},{"location":"tasks/ngsderive/","text":"ngsderive This WDL tool wraps the ngsderive package . ngsderive is a utility tool to backwards compute strandedness, readlength, instrument for next-generation sequencing data. infer_strandedness Inputs Required bai (File, required ) bam (File, required ) gtf (File, required ) Defaults max_retries (Int, default=1) memory_gb (Int, default=5) Outputs strandedness (File) strandedness_file (File) instrument Inputs Required bam (File, required ) Defaults max_retries (Int, default=1) Outputs instrument_file (File) read_length Inputs Required bai (File, required ) bam (File, required ) Defaults max_retries (Int, default=1) memory_gb (Int, default=5) Outputs read_length_file (File) encoding Inputs Required ngs_files (Array[File], required ) prefix (String, required ) Defaults max_retries (Int, default=1) memory_gb (Int, default=5) num_reads (Int, default=-1) Outputs inferred_encoding (File) encoding_file (File) junction_annotation Inputs Required bai (File, required ) bam (File, required ) gtf (File, required ) Defaults fuzzy_junction_match_range (Int, default=0) max_retries (Int, default=1) memory_gb (Int, default=35) min_intron (Int, default=50) min_mapq (Int, default=30) min_reads (Int, default=2) prefix (String, default=basename(bam,\".bam\")) Outputs junction_summary (File) junctions (File)","title":"ngsderive"},{"location":"tasks/ngsderive/#ngsderive","text":"This WDL tool wraps the ngsderive package . ngsderive is a utility tool to backwards compute strandedness, readlength, instrument for next-generation sequencing data.","title":"ngsderive"},{"location":"tasks/ngsderive/#infer_strandedness","text":"","title":"infer_strandedness"},{"location":"tasks/ngsderive/#inputs","text":"","title":"Inputs"},{"location":"tasks/ngsderive/#required","text":"bai (File, required ) bam (File, required ) gtf (File, required )","title":"Required"},{"location":"tasks/ngsderive/#defaults","text":"max_retries (Int, default=1) memory_gb (Int, default=5)","title":"Defaults"},{"location":"tasks/ngsderive/#outputs","text":"strandedness (File) strandedness_file (File)","title":"Outputs"},{"location":"tasks/ngsderive/#instrument","text":"","title":"instrument"},{"location":"tasks/ngsderive/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/ngsderive/#required_1","text":"bam (File, required )","title":"Required"},{"location":"tasks/ngsderive/#defaults_1","text":"max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/ngsderive/#outputs_1","text":"instrument_file (File)","title":"Outputs"},{"location":"tasks/ngsderive/#read_length","text":"","title":"read_length"},{"location":"tasks/ngsderive/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/ngsderive/#required_2","text":"bai (File, required ) bam (File, required )","title":"Required"},{"location":"tasks/ngsderive/#defaults_2","text":"max_retries (Int, default=1) memory_gb (Int, default=5)","title":"Defaults"},{"location":"tasks/ngsderive/#outputs_2","text":"read_length_file (File)","title":"Outputs"},{"location":"tasks/ngsderive/#encoding","text":"","title":"encoding"},{"location":"tasks/ngsderive/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/ngsderive/#required_3","text":"ngs_files (Array[File], required ) prefix (String, required )","title":"Required"},{"location":"tasks/ngsderive/#defaults_3","text":"max_retries (Int, default=1) memory_gb (Int, default=5) num_reads (Int, default=-1)","title":"Defaults"},{"location":"tasks/ngsderive/#outputs_3","text":"inferred_encoding (File) encoding_file (File)","title":"Outputs"},{"location":"tasks/ngsderive/#junction_annotation","text":"","title":"junction_annotation"},{"location":"tasks/ngsderive/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/ngsderive/#required_4","text":"bai (File, required ) bam (File, required ) gtf (File, required )","title":"Required"},{"location":"tasks/ngsderive/#defaults_4","text":"fuzzy_junction_match_range (Int, default=0) max_retries (Int, default=1) memory_gb (Int, default=35) min_intron (Int, default=50) min_mapq (Int, default=30) min_reads (Int, default=2) prefix (String, default=basename(bam,\".bam\"))","title":"Defaults"},{"location":"tasks/ngsderive/#outputs_4","text":"junction_summary (File) junctions (File)","title":"Outputs"},{"location":"tasks/picard/","text":"Picard This WDL tool wraps the PicardTools library . PicardTools is a set of Java tools for manipulating sequencing data. mark_duplicates author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool marks duplicate reads in the input BAM file using Picard. Inputs Required bam (File, required ): Input BAM format file to mark duplicates Defaults max_retries (Int, default=1) memory_gb (Int, default=50) prefix (String, default=basename(bam,\".bam\")) Outputs out (File) validate_bam author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool validates the input BAM file for correct formatting using Picard. Inputs Required bam (File, required ): Input BAM format file to validate Defaults ignore_list (Array[String], default=[\"MISSING_PLATFORM_VALUE\", \"INVALID_PLATFORM_VALUE\", \"INVALID_MAPPING_QUALITY\"]): List of Picard errors and warnings to ignore. Possible values can be found on the GATK website index_validation_stringency_less_exhaustive (Boolean, default=false): Boolean to set INDEX_VALIDATION_STRINGENCY=LESS_EXHAUSTIVE for picard ValidateSamFile max_errors (Int, default=2147483647): Set the value of MAX_OUTPUT for picard ValidateSamFile . The Picard default is 100, a lower number can enable fast fail behavior max_retries (Int, default=1) memory_gb (Int, default=8) output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") succeed_on_errors (Boolean, default=false): Succeed the task even if errors and/or warnings are detected succeed_on_warnings (Boolean, default=true): Succeed the task if warnings are detected and there are no errors. Overridden by succeed_on_errors summary_mode (Boolean, default=false): Boolean to enable SUMMARY mode of picard ValidateSamFile Outputs out (File) validated_bam (File) bam_to_fastq author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool converts the input BAM file into paired FastQ format files. Inputs Required bam (File, required ): Input BAM format file to convert to FastQ Defaults max_retries (Int, default=1) memory_gb (Int, default=40) prefix (String, default=basename(bam,\".bam\")) Outputs read1 (File) read2 (File) sort author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool sorts the input BAM file. Inputs Required bam (File, required ): Input BAM format file to sort Optional disk_size_gb (Int?) Defaults max_retries (Int, default=1) memory_gb (Int, default=25) output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") sort_order (String, default=\"coordinate\") Outputs sorted_bam (File) merge_sam_files author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool merges the input BAM files into a single BAM file. Inputs Required bam (Array[File], required ): Input BAMs to merge Defaults max_retries (Int, default=1) memory_gb (Int, default=40) output_name (String, default=\"merged.bam\") sort_order (String, default=\"coordinate\") threading (Boolean, default=true) Outputs merged_bam (File) clean_sam author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool cleans the input BAM file. Cleans soft-clipping beyond end-of-reference, sets MAPQ=0 for unmapped reads Inputs Required bam (File, required ): Input BAM format file to clean Optional disk_size_gb (Int?) Defaults max_retries (Int, default=1) memory_gb (Int, default=25) output_filename (String, default=basename(bam,\".bam\") + \".cleaned.bam\") Outputs cleaned_bam (File)","title":"Picard"},{"location":"tasks/picard/#picard","text":"This WDL tool wraps the PicardTools library . PicardTools is a set of Java tools for manipulating sequencing data.","title":"Picard"},{"location":"tasks/picard/#mark_duplicates","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool marks duplicate reads in the input BAM file using Picard.","title":"mark_duplicates"},{"location":"tasks/picard/#inputs","text":"","title":"Inputs"},{"location":"tasks/picard/#required","text":"bam (File, required ): Input BAM format file to mark duplicates","title":"Required"},{"location":"tasks/picard/#defaults","text":"max_retries (Int, default=1) memory_gb (Int, default=50) prefix (String, default=basename(bam,\".bam\"))","title":"Defaults"},{"location":"tasks/picard/#outputs","text":"out (File)","title":"Outputs"},{"location":"tasks/picard/#validate_bam","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool validates the input BAM file for correct formatting using Picard.","title":"validate_bam"},{"location":"tasks/picard/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/picard/#required_1","text":"bam (File, required ): Input BAM format file to validate","title":"Required"},{"location":"tasks/picard/#defaults_1","text":"ignore_list (Array[String], default=[\"MISSING_PLATFORM_VALUE\", \"INVALID_PLATFORM_VALUE\", \"INVALID_MAPPING_QUALITY\"]): List of Picard errors and warnings to ignore. Possible values can be found on the GATK website index_validation_stringency_less_exhaustive (Boolean, default=false): Boolean to set INDEX_VALIDATION_STRINGENCY=LESS_EXHAUSTIVE for picard ValidateSamFile max_errors (Int, default=2147483647): Set the value of MAX_OUTPUT for picard ValidateSamFile . The Picard default is 100, a lower number can enable fast fail behavior max_retries (Int, default=1) memory_gb (Int, default=8) output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") succeed_on_errors (Boolean, default=false): Succeed the task even if errors and/or warnings are detected succeed_on_warnings (Boolean, default=true): Succeed the task if warnings are detected and there are no errors. Overridden by succeed_on_errors summary_mode (Boolean, default=false): Boolean to enable SUMMARY mode of picard ValidateSamFile","title":"Defaults"},{"location":"tasks/picard/#outputs_1","text":"out (File) validated_bam (File)","title":"Outputs"},{"location":"tasks/picard/#bam_to_fastq","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool converts the input BAM file into paired FastQ format files.","title":"bam_to_fastq"},{"location":"tasks/picard/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/picard/#required_2","text":"bam (File, required ): Input BAM format file to convert to FastQ","title":"Required"},{"location":"tasks/picard/#defaults_2","text":"max_retries (Int, default=1) memory_gb (Int, default=40) prefix (String, default=basename(bam,\".bam\"))","title":"Defaults"},{"location":"tasks/picard/#outputs_2","text":"read1 (File) read2 (File)","title":"Outputs"},{"location":"tasks/picard/#sort","text":"author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool sorts the input BAM file.","title":"sort"},{"location":"tasks/picard/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/picard/#required_3","text":"bam (File, required ): Input BAM format file to sort","title":"Required"},{"location":"tasks/picard/#optional","text":"disk_size_gb (Int?)","title":"Optional"},{"location":"tasks/picard/#defaults_3","text":"max_retries (Int, default=1) memory_gb (Int, default=25) output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") sort_order (String, default=\"coordinate\")","title":"Defaults"},{"location":"tasks/picard/#outputs_3","text":"sorted_bam (File)","title":"Outputs"},{"location":"tasks/picard/#merge_sam_files","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool merges the input BAM files into a single BAM file.","title":"merge_sam_files"},{"location":"tasks/picard/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/picard/#required_4","text":"bam (Array[File], required ): Input BAMs to merge","title":"Required"},{"location":"tasks/picard/#defaults_4","text":"max_retries (Int, default=1) memory_gb (Int, default=40) output_name (String, default=\"merged.bam\") sort_order (String, default=\"coordinate\") threading (Boolean, default=true)","title":"Defaults"},{"location":"tasks/picard/#outputs_4","text":"merged_bam (File)","title":"Outputs"},{"location":"tasks/picard/#clean_sam","text":"author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool cleans the input BAM file. Cleans soft-clipping beyond end-of-reference, sets MAPQ=0 for unmapped reads","title":"clean_sam"},{"location":"tasks/picard/#inputs_5","text":"","title":"Inputs"},{"location":"tasks/picard/#required_5","text":"bam (File, required ): Input BAM format file to clean","title":"Required"},{"location":"tasks/picard/#optional_1","text":"disk_size_gb (Int?)","title":"Optional"},{"location":"tasks/picard/#defaults_5","text":"max_retries (Int, default=1) memory_gb (Int, default=25) output_filename (String, default=basename(bam,\".bam\") + \".cleaned.bam\")","title":"Defaults"},{"location":"tasks/picard/#outputs_5","text":"cleaned_bam (File)","title":"Outputs"},{"location":"tasks/qualimap/","text":"QualiMap This WDL tool wraps the QualiMap tool. QualiMap computes metrics to facilitate evaluation of sequencing data. bamqc author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs QualiMap's bamqc tool on the input BAM file. Inputs Required bam (File, required ): Input BAM format file to run qualimap bamqc on Optional disk_size_gb (Int?) Defaults max_retries (Int, default=1) memory_gb (Int, default=32) ncpu (Int, default=1) Outputs results (File) rnaseq author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates runs QualiMap's rnaseq tool on the input BAM file. Inputs Required bam (File, required ): Input BAM format file to run qualimap rnaseq on gtf (File, required ): A GTF format features file Optional disk_size_gb (Int?) Defaults inferred_strandedness (String, default=\"\") max_retries (Int, default=1) memory_gb (Int, default=16) name_sorted (Boolean, default=false) paired_end (Boolean, default=false) provided_strandedness (String, default=\"\"): Strand information for RNA-seq experiments. Options: [Stranded-Reverse, Stranded-Forward, Unstranded] Outputs results (File)","title":"QualiMap"},{"location":"tasks/qualimap/#qualimap","text":"This WDL tool wraps the QualiMap tool. QualiMap computes metrics to facilitate evaluation of sequencing data.","title":"QualiMap"},{"location":"tasks/qualimap/#bamqc","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs QualiMap's bamqc tool on the input BAM file.","title":"bamqc"},{"location":"tasks/qualimap/#inputs","text":"","title":"Inputs"},{"location":"tasks/qualimap/#required","text":"bam (File, required ): Input BAM format file to run qualimap bamqc on","title":"Required"},{"location":"tasks/qualimap/#optional","text":"disk_size_gb (Int?)","title":"Optional"},{"location":"tasks/qualimap/#defaults","text":"max_retries (Int, default=1) memory_gb (Int, default=32) ncpu (Int, default=1)","title":"Defaults"},{"location":"tasks/qualimap/#outputs","text":"results (File)","title":"Outputs"},{"location":"tasks/qualimap/#rnaseq","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates runs QualiMap's rnaseq tool on the input BAM file.","title":"rnaseq"},{"location":"tasks/qualimap/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/qualimap/#required_1","text":"bam (File, required ): Input BAM format file to run qualimap rnaseq on gtf (File, required ): A GTF format features file","title":"Required"},{"location":"tasks/qualimap/#optional_1","text":"disk_size_gb (Int?)","title":"Optional"},{"location":"tasks/qualimap/#defaults_1","text":"inferred_strandedness (String, default=\"\") max_retries (Int, default=1) memory_gb (Int, default=16) name_sorted (Boolean, default=false) paired_end (Boolean, default=false) provided_strandedness (String, default=\"\"): Strand information for RNA-seq experiments. Options: [Stranded-Reverse, Stranded-Forward, Unstranded]","title":"Defaults"},{"location":"tasks/qualimap/#outputs_1","text":"results (File)","title":"Outputs"},{"location":"tasks/samtools/","text":"SAMtools This WDL tool wraps the SAMtools package . SAMtools provides utlities for manipulating SAM format sequence alignments. quickcheck author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs Samtools quickcheck on the input BAM file. This checks that the BAM file appears to be intact, e.g. header exists, at least one sequence is present, and the end-of-file marker exists. Inputs Required bam (File, required ): Input BAM format file to quickcheck Defaults max_retries (Int, default=1) Outputs checked_bam (File) split author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs Samtools split on the input BAM file. This splits the BAM by read group into one or more output files. It optionally errors if there are reads present that do not belong to a read group. Inputs Required bam (File, required ): Input BAM format file to split Optional disk_size_gb (Int?) Defaults detect_nproc (Boolean, default=false) max_retries (Int, default=1) ncpu (Int, default=1) prefix (String, default=basename(bam,\".bam\")) reject_unaccounted (Boolean, default=true): If true, error if there are reads present that do not have read group information. Outputs split_bams (Array[File]) flagstat author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates a FastQC quality control metrics report for the input BAM file. Inputs Required bam (File, required ): Input BAM format file to generate flagstat for Defaults max_retries (Int, default=1) memory_gb (Int, default=5) outfilename (String, default=basename(bam,\".bam\") + \".flagstat.txt\") Outputs outfile (File) index author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs Samtools flagstat on the input BAM file. Produces statistics about the alignments based on the bit flags set in the BAM. Inputs Required bam (File, required ): Input BAM format file to index Defaults detect_nproc (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=15) ncpu (Int, default=1) outfile (String, default=basename(bam) + \".bai\") Outputs bai (File) subsample Inputs Required bam (File, required ) Defaults desired_reads (Int, default=500000) detect_nproc (Boolean, default=false) max_retries (Int, default=1) ncpu (Int, default=1) outname (String, default=basename(bam,\".bam\") + \".subsampled.bam\") Outputs sampled_bam (File) merge Inputs Required bams (Array[File], required ) Optional new_header (File?) Defaults attach_rg (Boolean, default=true) detect_nproc (Boolean, default=false) max_retries (Int, default=1) ncpu (Int, default=1) outname (String, default=basename(bams[0],\".bam\") + \".merged.bam\") Outputs merged_bam (File) addreplacerg author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool runs Samtools addreplacerg on the input BAM file. This adds an existing read group record to reads in the BAM lacking read group tags. Inputs Required bam (File, required ): Input BAM format file to add read group information read_group_id (String, required ): Existing read group ID in BAM to add to reads Defaults detect_nproc (Boolean, default=false) max_retries (Int, default=1) ncpu (Int, default=1) outname (String, default=basename(bam,\".bam\") + \".read_group.bam\") Outputs tagged_bam (File)","title":"SAMtools"},{"location":"tasks/samtools/#samtools","text":"This WDL tool wraps the SAMtools package . SAMtools provides utlities for manipulating SAM format sequence alignments.","title":"SAMtools"},{"location":"tasks/samtools/#quickcheck","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs Samtools quickcheck on the input BAM file. This checks that the BAM file appears to be intact, e.g. header exists, at least one sequence is present, and the end-of-file marker exists.","title":"quickcheck"},{"location":"tasks/samtools/#inputs","text":"","title":"Inputs"},{"location":"tasks/samtools/#required","text":"bam (File, required ): Input BAM format file to quickcheck","title":"Required"},{"location":"tasks/samtools/#defaults","text":"max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/samtools/#outputs","text":"checked_bam (File)","title":"Outputs"},{"location":"tasks/samtools/#split","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs Samtools split on the input BAM file. This splits the BAM by read group into one or more output files. It optionally errors if there are reads present that do not belong to a read group.","title":"split"},{"location":"tasks/samtools/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/samtools/#required_1","text":"bam (File, required ): Input BAM format file to split","title":"Required"},{"location":"tasks/samtools/#optional","text":"disk_size_gb (Int?)","title":"Optional"},{"location":"tasks/samtools/#defaults_1","text":"detect_nproc (Boolean, default=false) max_retries (Int, default=1) ncpu (Int, default=1) prefix (String, default=basename(bam,\".bam\")) reject_unaccounted (Boolean, default=true): If true, error if there are reads present that do not have read group information.","title":"Defaults"},{"location":"tasks/samtools/#outputs_1","text":"split_bams (Array[File])","title":"Outputs"},{"location":"tasks/samtools/#flagstat","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates a FastQC quality control metrics report for the input BAM file.","title":"flagstat"},{"location":"tasks/samtools/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/samtools/#required_2","text":"bam (File, required ): Input BAM format file to generate flagstat for","title":"Required"},{"location":"tasks/samtools/#defaults_2","text":"max_retries (Int, default=1) memory_gb (Int, default=5) outfilename (String, default=basename(bam,\".bam\") + \".flagstat.txt\")","title":"Defaults"},{"location":"tasks/samtools/#outputs_2","text":"outfile (File)","title":"Outputs"},{"location":"tasks/samtools/#index","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs Samtools flagstat on the input BAM file. Produces statistics about the alignments based on the bit flags set in the BAM.","title":"index"},{"location":"tasks/samtools/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/samtools/#required_3","text":"bam (File, required ): Input BAM format file to index","title":"Required"},{"location":"tasks/samtools/#defaults_3","text":"detect_nproc (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=15) ncpu (Int, default=1) outfile (String, default=basename(bam) + \".bai\")","title":"Defaults"},{"location":"tasks/samtools/#outputs_3","text":"bai (File)","title":"Outputs"},{"location":"tasks/samtools/#subsample","text":"","title":"subsample"},{"location":"tasks/samtools/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/samtools/#required_4","text":"bam (File, required )","title":"Required"},{"location":"tasks/samtools/#defaults_4","text":"desired_reads (Int, default=500000) detect_nproc (Boolean, default=false) max_retries (Int, default=1) ncpu (Int, default=1) outname (String, default=basename(bam,\".bam\") + \".subsampled.bam\")","title":"Defaults"},{"location":"tasks/samtools/#outputs_4","text":"sampled_bam (File)","title":"Outputs"},{"location":"tasks/samtools/#merge","text":"","title":"merge"},{"location":"tasks/samtools/#inputs_5","text":"","title":"Inputs"},{"location":"tasks/samtools/#required_5","text":"bams (Array[File], required )","title":"Required"},{"location":"tasks/samtools/#optional_1","text":"new_header (File?)","title":"Optional"},{"location":"tasks/samtools/#defaults_5","text":"attach_rg (Boolean, default=true) detect_nproc (Boolean, default=false) max_retries (Int, default=1) ncpu (Int, default=1) outname (String, default=basename(bams[0],\".bam\") + \".merged.bam\")","title":"Defaults"},{"location":"tasks/samtools/#outputs_5","text":"merged_bam (File)","title":"Outputs"},{"location":"tasks/samtools/#addreplacerg","text":"author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool runs Samtools addreplacerg on the input BAM file. This adds an existing read group record to reads in the BAM lacking read group tags.","title":"addreplacerg"},{"location":"tasks/samtools/#inputs_6","text":"","title":"Inputs"},{"location":"tasks/samtools/#required_6","text":"bam (File, required ): Input BAM format file to add read group information read_group_id (String, required ): Existing read group ID in BAM to add to reads","title":"Required"},{"location":"tasks/samtools/#defaults_6","text":"detect_nproc (Boolean, default=false) max_retries (Int, default=1) ncpu (Int, default=1) outname (String, default=basename(bam,\".bam\") + \".read_group.bam\")","title":"Defaults"},{"location":"tasks/samtools/#outputs_6","text":"tagged_bam (File)","title":"Outputs"},{"location":"tasks/sequencerr/","text":"sequencErr This WDL tool wraps the sequencErr software (unpublished). sequencErr approximates error rates in Illumina sequencing machines down to tile level precision. sequencerr Inputs Required bai (File, required ) bam (File, required ) Optional prefix (String?) Defaults max_retries (Int, default=1) output_count_file (Boolean, default=false): Whether to output granular count file. Result file is large; uncompressed can reach over half input BAM size, compressed can be ~10% BAM size. Outputs results (File)","title":"sequencErr"},{"location":"tasks/sequencerr/#sequencerr","text":"This WDL tool wraps the sequencErr software (unpublished). sequencErr approximates error rates in Illumina sequencing machines down to tile level precision.","title":"sequencErr"},{"location":"tasks/sequencerr/#sequencerr_1","text":"","title":"sequencerr"},{"location":"tasks/sequencerr/#inputs","text":"","title":"Inputs"},{"location":"tasks/sequencerr/#required","text":"bai (File, required ) bam (File, required )","title":"Required"},{"location":"tasks/sequencerr/#optional","text":"prefix (String?)","title":"Optional"},{"location":"tasks/sequencerr/#defaults","text":"max_retries (Int, default=1) output_count_file (Boolean, default=false): Whether to output granular count file. Result file is large; uncompressed can reach over half input BAM size, compressed can be ~10% BAM size.","title":"Defaults"},{"location":"tasks/sequencerr/#outputs","text":"results (File)","title":"Outputs"},{"location":"tasks/star/","text":"STAR This WDL tool wraps the STAR aligner . STAR is an RNA-seq aligner. build_star_db author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs STAR's build command to generate a STAR format reference for alignment. Inputs Required gtf (File, required ): GTF format feature file reference_fasta (File, required ): The FASTA format reference file for the genome stardb_dir_name (String, required ) Optional disk_size_gb (Int?) Defaults detect_nproc (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=50) ncpu (Int, default=1) ram_limit (String, default=\"45000000000\") Outputs stardb_out (File) alignment author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs the STAR aligner on a set of RNA-Seq FastQ files. Inputs Required output_prefix (String, required ) read_one_fastqs (Array[File], required ): An array of FastQ files containing read one information stardb_tar_gz (File, required ): A gzipped TAR file containing the STAR reference files Optional disk_size_gb (Int?) read_groups (String?): A string containing the read group information to output in the BAM file. If including multiple read group fields per-read group, they should be space delimited. Read groups should be comma separated, with a space on each side (e.g. ' , '). The ID field must come first for each read group and must match the basename of a fastq file (up to the first period). Example: ID:rg1 PU:flowcell1.lane1 SM:sample1 PL:illumina LB:sample1_lib1 , ID:rg2 PU:flowcell1.lane2 SM:sample1 PL:illumina LB:sample1_lib1 read_two_fastqs (Array[File]?): An array of FastQ files containing read two information Defaults detect_nproc (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=50) ncpu (Int, default=1) Outputs star_log (File) star_bam (File)","title":"STAR"},{"location":"tasks/star/#star","text":"This WDL tool wraps the STAR aligner . STAR is an RNA-seq aligner.","title":"STAR"},{"location":"tasks/star/#build_star_db","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs STAR's build command to generate a STAR format reference for alignment.","title":"build_star_db"},{"location":"tasks/star/#inputs","text":"","title":"Inputs"},{"location":"tasks/star/#required","text":"gtf (File, required ): GTF format feature file reference_fasta (File, required ): The FASTA format reference file for the genome stardb_dir_name (String, required )","title":"Required"},{"location":"tasks/star/#optional","text":"disk_size_gb (Int?)","title":"Optional"},{"location":"tasks/star/#defaults","text":"detect_nproc (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=50) ncpu (Int, default=1) ram_limit (String, default=\"45000000000\")","title":"Defaults"},{"location":"tasks/star/#outputs","text":"stardb_out (File)","title":"Outputs"},{"location":"tasks/star/#alignment","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs the STAR aligner on a set of RNA-Seq FastQ files.","title":"alignment"},{"location":"tasks/star/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/star/#required_1","text":"output_prefix (String, required ) read_one_fastqs (Array[File], required ): An array of FastQ files containing read one information stardb_tar_gz (File, required ): A gzipped TAR file containing the STAR reference files","title":"Required"},{"location":"tasks/star/#optional_1","text":"disk_size_gb (Int?) read_groups (String?): A string containing the read group information to output in the BAM file. If including multiple read group fields per-read group, they should be space delimited. Read groups should be comma separated, with a space on each side (e.g. ' , '). The ID field must come first for each read group and must match the basename of a fastq file (up to the first period). Example: ID:rg1 PU:flowcell1.lane1 SM:sample1 PL:illumina LB:sample1_lib1 , ID:rg2 PU:flowcell1.lane2 SM:sample1 PL:illumina LB:sample1_lib1 read_two_fastqs (Array[File]?): An array of FastQ files containing read two information","title":"Optional"},{"location":"tasks/star/#defaults_1","text":"detect_nproc (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=50) ncpu (Int, default=1)","title":"Defaults"},{"location":"tasks/star/#outputs_1","text":"star_log (File) star_bam (File)","title":"Outputs"},{"location":"tasks/util/","text":"Utilities This WDL tool includes custom scripts to parse and reformat task output as part of a workflow as well as generic tasks. download author Clay McLeod email clay.mcleod@stjude.org description This WDL tool uses wget to download a file from a remote URL to the local filesystem Inputs Required outfilename (String, required ): Name to use for the output file url (String, required ): URL of the file to download Defaults disk_size_GB (Int, default=10) max_retries (Int, default=1) Outputs outfile (File) get_read_groups author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool is a utility to get read group information from a BAM file and write it out to as a string Inputs Required bam (File, required ): Input BAM format file to get read groups from Defaults format_for_star (Boolean, default=true) max_retries (Int, default=1) Outputs out (File) split_string Inputs Required input_string (String, required ) Defaults delimiter (String, default=\" , \") disk_size (Int, default=1) max_retries (Int, default=1) Outputs output_file (File) out (Array[String]) file_prefix Inputs Required in_file (File, required ) Defaults max_retries (Int, default=1) Outputs out (File) calc_gene_lengths Inputs Required gtf (File, required ) Defaults max_retries (Int, default=1) outfile (String, default=basename(gtf,\".gtf.gz\") + \".genelengths.txt\") Outputs out (File) qc_summary author Andrew Frantz email andrew.frantz@stjude.org description This WDL task pulls out keys metrics that can provide a high level overview of the sample, without needing to examine the entire MultiQC report. Currently, these key metrics come from Qualimap and ngsderive. Inputs Required multiqc_tar_gz (File, required ) Defaults disk_size (Int, default=1) max_retries (Int, default=1) outfile (String, default=basename(multiqc_tar_gz,\".multiqc.tar.gz\") + \".qc_summary.json\") Outputs out (File) compression_integrity Inputs Required bam (File, required ) Defaults max_retries (Int, default=1) Outputs None add_to_bam_header Inputs Required additional_header (String, required ) input_bam (File, required ) Defaults max_retries (Int, default=1) output_bam_name (String, default=basename(input_bam,\".bam\") + \".reheader.bam\") Outputs output_file (File) out (Array[String]) output_bam (File)","title":"Utilities"},{"location":"tasks/util/#utilities","text":"This WDL tool includes custom scripts to parse and reformat task output as part of a workflow as well as generic tasks.","title":"Utilities"},{"location":"tasks/util/#download","text":"author Clay McLeod email clay.mcleod@stjude.org description This WDL tool uses wget to download a file from a remote URL to the local filesystem","title":"download"},{"location":"tasks/util/#inputs","text":"","title":"Inputs"},{"location":"tasks/util/#required","text":"outfilename (String, required ): Name to use for the output file url (String, required ): URL of the file to download","title":"Required"},{"location":"tasks/util/#defaults","text":"disk_size_GB (Int, default=10) max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/util/#outputs","text":"outfile (File)","title":"Outputs"},{"location":"tasks/util/#get_read_groups","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool is a utility to get read group information from a BAM file and write it out to as a string","title":"get_read_groups"},{"location":"tasks/util/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/util/#required_1","text":"bam (File, required ): Input BAM format file to get read groups from","title":"Required"},{"location":"tasks/util/#defaults_1","text":"format_for_star (Boolean, default=true) max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/util/#outputs_1","text":"out (File)","title":"Outputs"},{"location":"tasks/util/#split_string","text":"","title":"split_string"},{"location":"tasks/util/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/util/#required_2","text":"input_string (String, required )","title":"Required"},{"location":"tasks/util/#defaults_2","text":"delimiter (String, default=\" , \") disk_size (Int, default=1) max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/util/#outputs_2","text":"output_file (File) out (Array[String])","title":"Outputs"},{"location":"tasks/util/#file_prefix","text":"","title":"file_prefix"},{"location":"tasks/util/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/util/#required_3","text":"in_file (File, required )","title":"Required"},{"location":"tasks/util/#defaults_3","text":"max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/util/#outputs_3","text":"out (File)","title":"Outputs"},{"location":"tasks/util/#calc_gene_lengths","text":"","title":"calc_gene_lengths"},{"location":"tasks/util/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/util/#required_4","text":"gtf (File, required )","title":"Required"},{"location":"tasks/util/#defaults_4","text":"max_retries (Int, default=1) outfile (String, default=basename(gtf,\".gtf.gz\") + \".genelengths.txt\")","title":"Defaults"},{"location":"tasks/util/#outputs_4","text":"out (File)","title":"Outputs"},{"location":"tasks/util/#qc_summary","text":"author Andrew Frantz email andrew.frantz@stjude.org description This WDL task pulls out keys metrics that can provide a high level overview of the sample, without needing to examine the entire MultiQC report. Currently, these key metrics come from Qualimap and ngsderive.","title":"qc_summary"},{"location":"tasks/util/#inputs_5","text":"","title":"Inputs"},{"location":"tasks/util/#required_5","text":"multiqc_tar_gz (File, required )","title":"Required"},{"location":"tasks/util/#defaults_5","text":"disk_size (Int, default=1) max_retries (Int, default=1) outfile (String, default=basename(multiqc_tar_gz,\".multiqc.tar.gz\") + \".qc_summary.json\")","title":"Defaults"},{"location":"tasks/util/#outputs_5","text":"out (File)","title":"Outputs"},{"location":"tasks/util/#compression_integrity","text":"","title":"compression_integrity"},{"location":"tasks/util/#inputs_6","text":"","title":"Inputs"},{"location":"tasks/util/#required_6","text":"bam (File, required )","title":"Required"},{"location":"tasks/util/#defaults_6","text":"max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/util/#outputs_6","text":"None","title":"Outputs"},{"location":"tasks/util/#add_to_bam_header","text":"","title":"add_to_bam_header"},{"location":"tasks/util/#inputs_7","text":"","title":"Inputs"},{"location":"tasks/util/#required_7","text":"additional_header (String, required ) input_bam (File, required )","title":"Required"},{"location":"tasks/util/#defaults_7","text":"max_retries (Int, default=1) output_bam_name (String, default=basename(input_bam,\".bam\") + \".reheader.bam\")","title":"Defaults"},{"location":"tasks/util/#outputs_7","text":"output_file (File) out (Array[String]) output_bam (File)","title":"Outputs"},{"location":"workflows/10x-bam-to-fastqs/","text":"Cell Ranger Bam to FastQs This WDL workflow converts an input BAM file to a set of fastq files. It performs QC checks along the way to validate the input and output. Output: read1s an array of files with the first read in the pair read2s an array of files with the second read in the pair fastqs an array of files sufficient for localizing in Cell Ranger's expected format fastqs_archive a compressed archive comtaining the array of fastq files LICENSING: MIT License Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. cell_ranger_bam_to_fastqs Inputs Required bam (File, required ): BAM file to split into fastqs. Optional fqlint_single.read2 (File?) Defaults bam_to_fastq_memory_gb (Int, default=40): How much memory to provide while converting to fastqs. detect_nproc (Boolean, default=false) max_retries (Int, default=1): Maximum number of times to retry on a failure. pairing (String, default=\"Paired-end\") samtools_sort_ncpu (Int, default=1): Number of CPUs to use while sorting the BAM. split_output_format (String, default=\"%*_%!.%.\") bamtofastq.cellranger11 (Boolean, default=false) bamtofastq.gemcode (Boolean, default=false) bamtofastq.longranger20 (Boolean, default=false) bamtofastq.max_retries (Int, default=1): Maximum number of times to retry on a failure. bamtofastq.memory_gb (Int, default=8) bamtofastq.ncpu (Int, default=4) fqlint_pair.memory_gb (Int, default=8) fqlint_single.memory_gb (Int, default=8) Outputs fastqs (Array[File]) fastqs_archive (File) read1s (Array[File]) read2s (Array[File])","title":"Cell Ranger Bam to FastQs"},{"location":"workflows/10x-bam-to-fastqs/#cell-ranger-bam-to-fastqs","text":"This WDL workflow converts an input BAM file to a set of fastq files. It performs QC checks along the way to validate the input and output.","title":"Cell Ranger Bam to FastQs"},{"location":"workflows/10x-bam-to-fastqs/#output","text":"read1s an array of files with the first read in the pair read2s an array of files with the second read in the pair fastqs an array of files sufficient for localizing in Cell Ranger's expected format fastqs_archive a compressed archive comtaining the array of fastq files","title":"Output:"},{"location":"workflows/10x-bam-to-fastqs/#licensing","text":"","title":"LICENSING:"},{"location":"workflows/10x-bam-to-fastqs/#mit-license","text":"Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/10x-bam-to-fastqs/#cell_ranger_bam_to_fastqs","text":"","title":"cell_ranger_bam_to_fastqs"},{"location":"workflows/10x-bam-to-fastqs/#inputs","text":"","title":"Inputs"},{"location":"workflows/10x-bam-to-fastqs/#required","text":"bam (File, required ): BAM file to split into fastqs.","title":"Required"},{"location":"workflows/10x-bam-to-fastqs/#optional","text":"fqlint_single.read2 (File?)","title":"Optional"},{"location":"workflows/10x-bam-to-fastqs/#defaults","text":"bam_to_fastq_memory_gb (Int, default=40): How much memory to provide while converting to fastqs. detect_nproc (Boolean, default=false) max_retries (Int, default=1): Maximum number of times to retry on a failure. pairing (String, default=\"Paired-end\") samtools_sort_ncpu (Int, default=1): Number of CPUs to use while sorting the BAM. split_output_format (String, default=\"%*_%!.%.\") bamtofastq.cellranger11 (Boolean, default=false) bamtofastq.gemcode (Boolean, default=false) bamtofastq.longranger20 (Boolean, default=false) bamtofastq.max_retries (Int, default=1): Maximum number of times to retry on a failure. bamtofastq.memory_gb (Int, default=8) bamtofastq.ncpu (Int, default=4) fqlint_pair.memory_gb (Int, default=8) fqlint_single.memory_gb (Int, default=8)","title":"Defaults"},{"location":"workflows/10x-bam-to-fastqs/#outputs","text":"fastqs (Array[File]) fastqs_archive (File) read1s (Array[File]) read2s (Array[File])","title":"Outputs"},{"location":"workflows/ESTIMATE/","text":"ESTIMATE Runs the ESTIMATE software package on a feature counts file. LICENSING: MIT License Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ESTIMATE Inputs Required counts_file (File, required ) gene_lengths_file (File, required ) Defaults calc_tpm.max_retries (Int, default=1) calc_tpm.outfile (String, default=basename(counts,\".feature-counts.txt\") + \".TPM.txt\") run_ESTIMATE.max_retries (Int, default=1) run_ESTIMATE.outfile (String, default=basename(gene_expression_file,\".TPM.txt\") + \".ESTIMATE.gct\") Outputs tpm (File) estimate_out (File)","title":"ESTIMATE"},{"location":"workflows/ESTIMATE/#estimate","text":"Runs the ESTIMATE software package on a feature counts file.","title":"ESTIMATE"},{"location":"workflows/ESTIMATE/#licensing","text":"","title":"LICENSING:"},{"location":"workflows/ESTIMATE/#mit-license","text":"Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/ESTIMATE/#estimate_1","text":"","title":"ESTIMATE"},{"location":"workflows/ESTIMATE/#inputs","text":"","title":"Inputs"},{"location":"workflows/ESTIMATE/#required","text":"counts_file (File, required ) gene_lengths_file (File, required )","title":"Required"},{"location":"workflows/ESTIMATE/#defaults","text":"calc_tpm.max_retries (Int, default=1) calc_tpm.outfile (String, default=basename(counts,\".feature-counts.txt\") + \".TPM.txt\") run_ESTIMATE.max_retries (Int, default=1) run_ESTIMATE.outfile (String, default=basename(gene_expression_file,\".TPM.txt\") + \".ESTIMATE.gct\")","title":"Defaults"},{"location":"workflows/ESTIMATE/#outputs","text":"tpm (File) estimate_out (File)","title":"Outputs"},{"location":"workflows/bam-to-fastqs/","text":"Bam to FastQs This WDL workflow converts an input BAM file to a set of fastq files for read 1 and read 2. It performs QC checks along the way to validate the input and output. Output: read1s an array of files with the first read in the pair read2s an array of files with the second read in the pair LICENSING: MIT License Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. bam_to_fastqs Inputs Required bam (File, required ): BAM file to split into fastqs. Optional fqlint_single.read2 (File?) split.disk_size_gb (Int?) Defaults bam_to_fastq_memory_gb (Int, default=40): How much memory to provide while converting to fastqs. detect_nproc (Boolean, default=false) max_retries (Int, default=1): Maximum number of times to retry on a failure. pairing (String, default=\"Paired-end\") samtools_sort_ncpu (Int, default=1): Number of CPUs to use while sorting the BAM. bam_to_fastq.prefix (String, default=basename(bam,\".bam\")) fqlint_pair.memory_gb (Int, default=8) fqlint_single.memory_gb (Int, default=8) split.prefix (String, default=basename(bam,\".bam\")) split.reject_unaccounted (Boolean, default=true) Outputs read1s (Array[File]) read2s (Array[File])","title":"Bam to FastQs"},{"location":"workflows/bam-to-fastqs/#bam-to-fastqs","text":"This WDL workflow converts an input BAM file to a set of fastq files for read 1 and read 2. It performs QC checks along the way to validate the input and output.","title":"Bam to FastQs"},{"location":"workflows/bam-to-fastqs/#output","text":"read1s an array of files with the first read in the pair read2s an array of files with the second read in the pair","title":"Output:"},{"location":"workflows/bam-to-fastqs/#licensing","text":"","title":"LICENSING:"},{"location":"workflows/bam-to-fastqs/#mit-license","text":"Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/bam-to-fastqs/#bam_to_fastqs","text":"","title":"bam_to_fastqs"},{"location":"workflows/bam-to-fastqs/#inputs","text":"","title":"Inputs"},{"location":"workflows/bam-to-fastqs/#required","text":"bam (File, required ): BAM file to split into fastqs.","title":"Required"},{"location":"workflows/bam-to-fastqs/#optional","text":"fqlint_single.read2 (File?) split.disk_size_gb (Int?)","title":"Optional"},{"location":"workflows/bam-to-fastqs/#defaults","text":"bam_to_fastq_memory_gb (Int, default=40): How much memory to provide while converting to fastqs. detect_nproc (Boolean, default=false) max_retries (Int, default=1): Maximum number of times to retry on a failure. pairing (String, default=\"Paired-end\") samtools_sort_ncpu (Int, default=1): Number of CPUs to use while sorting the BAM. bam_to_fastq.prefix (String, default=basename(bam,\".bam\")) fqlint_pair.memory_gb (Int, default=8) fqlint_single.memory_gb (Int, default=8) split.prefix (String, default=basename(bam,\".bam\")) split.reject_unaccounted (Boolean, default=true)","title":"Defaults"},{"location":"workflows/bam-to-fastqs/#outputs","text":"read1s (Array[File]) read2s (Array[File])","title":"Outputs"},{"location":"workflows/bwa-db-build/","text":"BWA DB build This WDL workflow generates a set of genome reference files usable by the BWA aligner from an input reference file in FASTA format. Output reference_fa the reference FASTA file bwadb_tar_gz the BWA reference folder in .tar.gz format LICENSING MIT License Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. bwa_db_build Inputs Required reference_fa_name (String, required ): Name of output reference FASTA file reference_fa_url (String, required ): URL to retrieve the reference FASTA file from. Optional build_bwa_db.disk_size_gb (Int?) Defaults build_bwa_db.max_retries (Int, default=1) build_bwa_db.memory_gb (Int, default=5) reference_download.disk_size_GB (Int, default=10) reference_download.max_retries (Int, default=1) Outputs reference_fa (File) bwadb_tar_gz (File)","title":"BWA DB build"},{"location":"workflows/bwa-db-build/#bwa-db-build","text":"This WDL workflow generates a set of genome reference files usable by the BWA aligner from an input reference file in FASTA format.","title":"BWA DB build"},{"location":"workflows/bwa-db-build/#output","text":"reference_fa the reference FASTA file bwadb_tar_gz the BWA reference folder in .tar.gz format","title":"Output"},{"location":"workflows/bwa-db-build/#licensing","text":"","title":"LICENSING"},{"location":"workflows/bwa-db-build/#mit-license","text":"Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/bwa-db-build/#bwa_db_build","text":"","title":"bwa_db_build"},{"location":"workflows/bwa-db-build/#inputs","text":"","title":"Inputs"},{"location":"workflows/bwa-db-build/#required","text":"reference_fa_name (String, required ): Name of output reference FASTA file reference_fa_url (String, required ): URL to retrieve the reference FASTA file from.","title":"Required"},{"location":"workflows/bwa-db-build/#optional","text":"build_bwa_db.disk_size_gb (Int?)","title":"Optional"},{"location":"workflows/bwa-db-build/#defaults","text":"build_bwa_db.max_retries (Int, default=1) build_bwa_db.memory_gb (Int, default=5) reference_download.disk_size_GB (Int, default=10) reference_download.max_retries (Int, default=1)","title":"Defaults"},{"location":"workflows/bwa-db-build/#outputs","text":"reference_fa (File) bwadb_tar_gz (File)","title":"Outputs"},{"location":"workflows/calc-gene-lengths/","text":"Calculate Gene Lengths Calculates gene lengths from a GTF file. LICENSING: MIT License Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. calc_gene_lengths Inputs Required gtf (File, required ) Defaults calc.max_retries (Int, default=1) calc.outfile (String, default=basename(gtf,\".gtf.gz\") + \".genelengths.txt\") Outputs gene_lengths (File)","title":"Calculate Gene Lengths"},{"location":"workflows/calc-gene-lengths/#calculate-gene-lengths","text":"Calculates gene lengths from a GTF file.","title":"Calculate Gene Lengths"},{"location":"workflows/calc-gene-lengths/#licensing","text":"","title":"LICENSING:"},{"location":"workflows/calc-gene-lengths/#mit-license","text":"Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/calc-gene-lengths/#calc_gene_lengths","text":"","title":"calc_gene_lengths"},{"location":"workflows/calc-gene-lengths/#inputs","text":"","title":"Inputs"},{"location":"workflows/calc-gene-lengths/#required","text":"gtf (File, required )","title":"Required"},{"location":"workflows/calc-gene-lengths/#defaults","text":"calc.max_retries (Int, default=1) calc.outfile (String, default=basename(gtf,\".gtf.gz\") + \".genelengths.txt\")","title":"Defaults"},{"location":"workflows/calc-gene-lengths/#outputs","text":"gene_lengths (File)","title":"Outputs"},{"location":"workflows/chipseq-bwa-db-build/","text":"BWA DB build This WDL workflow generates a set of genome reference files usable by the BWA aligner from an input reference file in FASTA format. Output reference_fa the reference FASTA file bwadb_tar_gz the BWA DB folder in .tar.gz format LICENSING MIT License Copyright 2021-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. bwa_db_build Inputs Required reference_fa_name (String, required ): Name of output reference FASTA file reference_fa_url (String, required ): URL to retrieve the reference FASTA file from Optional build_bwa_db.disk_size_gb (Int?) Defaults build_bwa_db.max_retries (Int, default=1) build_bwa_db.memory_gb (Int, default=5) reference_download.disk_size_GB (Int, default=10) reference_download.max_retries (Int, default=1) Outputs reference_fa (File) bwadb_tar_gz (File)","title":"BWA DB build"},{"location":"workflows/chipseq-bwa-db-build/#bwa-db-build","text":"This WDL workflow generates a set of genome reference files usable by the BWA aligner from an input reference file in FASTA format.","title":"BWA DB build"},{"location":"workflows/chipseq-bwa-db-build/#output","text":"reference_fa the reference FASTA file bwadb_tar_gz the BWA DB folder in .tar.gz format","title":"Output"},{"location":"workflows/chipseq-bwa-db-build/#licensing","text":"","title":"LICENSING"},{"location":"workflows/chipseq-bwa-db-build/#mit-license","text":"Copyright 2021-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/chipseq-bwa-db-build/#bwa_db_build","text":"","title":"bwa_db_build"},{"location":"workflows/chipseq-bwa-db-build/#inputs","text":"","title":"Inputs"},{"location":"workflows/chipseq-bwa-db-build/#required","text":"reference_fa_name (String, required ): Name of output reference FASTA file reference_fa_url (String, required ): URL to retrieve the reference FASTA file from","title":"Required"},{"location":"workflows/chipseq-bwa-db-build/#optional","text":"build_bwa_db.disk_size_gb (Int?)","title":"Optional"},{"location":"workflows/chipseq-bwa-db-build/#defaults","text":"build_bwa_db.max_retries (Int, default=1) build_bwa_db.memory_gb (Int, default=5) reference_download.disk_size_GB (Int, default=10) reference_download.max_retries (Int, default=1)","title":"Defaults"},{"location":"workflows/chipseq-bwa-db-build/#outputs","text":"reference_fa (File) bwadb_tar_gz (File)","title":"Outputs"},{"location":"workflows/make-qc-reference/","text":"Make QC Reference Create the reference DB needed by FastQ Screen in the quality-check-standard workflow when analyzing WGS and WES BAMs. LICENSING: MIT License Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. make_qc_reference Inputs Defaults fastq_screen_build_db.max_retries (Int, default=1) fastq_screen_build_db.tar_filename (String, default=\"fastq-screen-db.tar.gz\") Outputs fastq_screen_db (File)","title":"Make QC Reference"},{"location":"workflows/make-qc-reference/#make-qc-reference","text":"Create the reference DB needed by FastQ Screen in the quality-check-standard workflow when analyzing WGS and WES BAMs.","title":"Make QC Reference"},{"location":"workflows/make-qc-reference/#licensing","text":"","title":"LICENSING:"},{"location":"workflows/make-qc-reference/#mit-license","text":"Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/make-qc-reference/#make_qc_reference","text":"","title":"make_qc_reference"},{"location":"workflows/make-qc-reference/#inputs","text":"","title":"Inputs"},{"location":"workflows/make-qc-reference/#defaults","text":"fastq_screen_build_db.max_retries (Int, default=1) fastq_screen_build_db.tar_filename (String, default=\"fastq-screen-db.tar.gz\")","title":"Defaults"},{"location":"workflows/make-qc-reference/#outputs","text":"fastq_screen_db (File)","title":"Outputs"},{"location":"workflows/quality-check-standard/","text":"Quality Check Standard This workflow runs a variety of quality checking software on any BAM file. It can be WGS, WES, or Transcriptome data. The results are aggregated and run through MultiQC . LICENSING MIT License Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. quality_check Inputs Required bam (File, required ): Input BAM format file to quality check bam_index (File, required ): BAM index file corresponding to the input BAM experiment (String, required ): 'WGS', 'WES', or 'RNA-Seq' Optional fastq_screen_db (File?): Database for FastQ Screen. Required for WGS and WES data. Can be generated using make-qc-reference.wdl . Must untar directly to genome directories. gtf (File?): GTF features file. Required for RNA-Seq data star_log (File?): Log file generated by the RNA-Seq aligner STAR fastq_screen.sample_name (String?) picard_sort.disk_size_gb (Int?) qualimap_bamqc.disk_size_gb (Int?) qualimap_rnaseq.disk_size_gb (Int?) Defaults max_retries (Int, default=1): Number of times to retry failed steps paired_end (Boolean, default=true): Whether the data is paired end phred_encoding (String, default=\"\"): Encoding format used for PHRED quality scores. Must be empty, 'sanger', or 'illumina1.3'. Only needed for WGS/WES. If missing, will be inferred strandedness (String, default=\"\"): empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'. Only needed for RNA-Seq data. If missing, will be inferred use_bamqc (Boolean, default=true): Whether or not to run qualimap bamqc . Useful for disabling problematic files. bam_to_fastq.memory_gb (Int, default=40) bam_to_fastq.prefix (String, default=basename(bam,\".bam\")) compute_checksum.memory_gb (Int, default=5) fastq_screen.num_reads (Int, default=0) fastqc.memory_gb (Int, default=5) fastqc.ncpu (Int, default=1) fqlint.memory_gb (Int, default=8) junction_annotation.fuzzy_junction_match_range (Int, default=0) junction_annotation.memory_gb (Int, default=35) junction_annotation.min_intron (Int, default=50) junction_annotation.min_mapq (Int, default=30) junction_annotation.min_reads (Int, default=2) junction_annotation.prefix (String, default=basename(bam,\".bam\")) multiqc.disk_size (Int, default=20) multiqc.memory_gb (Int, default=5) ngsderive_encoding.memory_gb (Int, default=5) ngsderive_encoding.num_reads (Int, default=-1) ngsderive_read_length.memory_gb (Int, default=5) ngsderive_strandedness.memory_gb (Int, default=5) picard_sort.memory_gb (Int, default=25) picard_sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") qc_summary.disk_size (Int, default=1) qc_summary.outfile (String, default=basename(multiqc_tar_gz,\".multiqc.tar.gz\") + \".qc_summary.json\") qualimap_bamqc.memory_gb (Int, default=32) qualimap_bamqc.ncpu (Int, default=1) qualimap_rnaseq.memory_gb (Int, default=16) samtools_flagstat.memory_gb (Int, default=5) samtools_flagstat.outfilename (String, default=basename(bam,\".bam\") + \".flagstat.txt\") samtools_subsample.desired_reads (Int, default=500000) samtools_subsample.detect_nproc (Boolean, default=false) samtools_subsample.ncpu (Int, default=1) samtools_subsample.outname (String, default=basename(bam,\".bam\") + \".subsampled.bam\") validate_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_bam.max_errors (Int, default=2147483647) validate_bam.memory_gb (Int, default=8) validate_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_bam.succeed_on_warnings (Boolean, default=true) Outputs bam_checksum (File) validate_sam_file (File) flagstat (File) fastqc_results (File) instrument_file (File) read_length_file (File) inferred_encoding (File) multiqc_zip (File) qualimap_bamqc_results (File?) fastq_screen_results (File?) inferred_strandedness (File?) qualimap_rnaseq_results (File?) junction_summary (File?) junctions (File?) qc_summary_file (File?) parse_input Inputs Required input_experiment (String, required ) input_fq_format (String, required ) input_strand (String, required ) Optional input_gtf (File?) Outputs input_check (String)","title":"Quality Check Standard"},{"location":"workflows/quality-check-standard/#quality-check-standard","text":"This workflow runs a variety of quality checking software on any BAM file. It can be WGS, WES, or Transcriptome data. The results are aggregated and run through MultiQC .","title":"Quality Check Standard"},{"location":"workflows/quality-check-standard/#licensing","text":"","title":"LICENSING"},{"location":"workflows/quality-check-standard/#mit-license","text":"Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/quality-check-standard/#quality_check","text":"","title":"quality_check"},{"location":"workflows/quality-check-standard/#inputs","text":"","title":"Inputs"},{"location":"workflows/quality-check-standard/#required","text":"bam (File, required ): Input BAM format file to quality check bam_index (File, required ): BAM index file corresponding to the input BAM experiment (String, required ): 'WGS', 'WES', or 'RNA-Seq'","title":"Required"},{"location":"workflows/quality-check-standard/#optional","text":"fastq_screen_db (File?): Database for FastQ Screen. Required for WGS and WES data. Can be generated using make-qc-reference.wdl . Must untar directly to genome directories. gtf (File?): GTF features file. Required for RNA-Seq data star_log (File?): Log file generated by the RNA-Seq aligner STAR fastq_screen.sample_name (String?) picard_sort.disk_size_gb (Int?) qualimap_bamqc.disk_size_gb (Int?) qualimap_rnaseq.disk_size_gb (Int?)","title":"Optional"},{"location":"workflows/quality-check-standard/#defaults","text":"max_retries (Int, default=1): Number of times to retry failed steps paired_end (Boolean, default=true): Whether the data is paired end phred_encoding (String, default=\"\"): Encoding format used for PHRED quality scores. Must be empty, 'sanger', or 'illumina1.3'. Only needed for WGS/WES. If missing, will be inferred strandedness (String, default=\"\"): empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'. Only needed for RNA-Seq data. If missing, will be inferred use_bamqc (Boolean, default=true): Whether or not to run qualimap bamqc . Useful for disabling problematic files. bam_to_fastq.memory_gb (Int, default=40) bam_to_fastq.prefix (String, default=basename(bam,\".bam\")) compute_checksum.memory_gb (Int, default=5) fastq_screen.num_reads (Int, default=0) fastqc.memory_gb (Int, default=5) fastqc.ncpu (Int, default=1) fqlint.memory_gb (Int, default=8) junction_annotation.fuzzy_junction_match_range (Int, default=0) junction_annotation.memory_gb (Int, default=35) junction_annotation.min_intron (Int, default=50) junction_annotation.min_mapq (Int, default=30) junction_annotation.min_reads (Int, default=2) junction_annotation.prefix (String, default=basename(bam,\".bam\")) multiqc.disk_size (Int, default=20) multiqc.memory_gb (Int, default=5) ngsderive_encoding.memory_gb (Int, default=5) ngsderive_encoding.num_reads (Int, default=-1) ngsderive_read_length.memory_gb (Int, default=5) ngsderive_strandedness.memory_gb (Int, default=5) picard_sort.memory_gb (Int, default=25) picard_sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") qc_summary.disk_size (Int, default=1) qc_summary.outfile (String, default=basename(multiqc_tar_gz,\".multiqc.tar.gz\") + \".qc_summary.json\") qualimap_bamqc.memory_gb (Int, default=32) qualimap_bamqc.ncpu (Int, default=1) qualimap_rnaseq.memory_gb (Int, default=16) samtools_flagstat.memory_gb (Int, default=5) samtools_flagstat.outfilename (String, default=basename(bam,\".bam\") + \".flagstat.txt\") samtools_subsample.desired_reads (Int, default=500000) samtools_subsample.detect_nproc (Boolean, default=false) samtools_subsample.ncpu (Int, default=1) samtools_subsample.outname (String, default=basename(bam,\".bam\") + \".subsampled.bam\") validate_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_bam.max_errors (Int, default=2147483647) validate_bam.memory_gb (Int, default=8) validate_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_bam.succeed_on_warnings (Boolean, default=true)","title":"Defaults"},{"location":"workflows/quality-check-standard/#outputs","text":"bam_checksum (File) validate_sam_file (File) flagstat (File) fastqc_results (File) instrument_file (File) read_length_file (File) inferred_encoding (File) multiqc_zip (File) qualimap_bamqc_results (File?) fastq_screen_results (File?) inferred_strandedness (File?) qualimap_rnaseq_results (File?) junction_summary (File?) junctions (File?) qc_summary_file (File?)","title":"Outputs"},{"location":"workflows/quality-check-standard/#parse_input","text":"","title":"parse_input"},{"location":"workflows/quality-check-standard/#inputs_1","text":"","title":"Inputs"},{"location":"workflows/quality-check-standard/#required_1","text":"input_experiment (String, required ) input_fq_format (String, required ) input_strand (String, required )","title":"Required"},{"location":"workflows/quality-check-standard/#optional_1","text":"input_gtf (File?)","title":"Optional"},{"location":"workflows/quality-check-standard/#outputs_1","text":"input_check (String)","title":"Outputs"},{"location":"workflows/rnaseq-standard-fastq/","text":"RNA-Seq Standard from FastQ This WDL workflow runs the STAR RNA-seq alignment workflow for St. Jude Cloud from fastq input. The workflow takes paired input fastq files. The read pairs are then passed through STAR alignment to generate a BAM file. The BAM is run through several QC steps. Quantification is done using htseq-count. LICENSING MIT License Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. rnaseq_standard_fastq Inputs Required gtf (File, required ): GTF feature file output_prefix (String, required ): Prefix for output files read_groups (String, required ): A space-delimited read group record for each read group. Exactly one fastq filename must match each read group ID from read_one_fastqs and read_two_fastqs . Read group fields (Required fields: ID, LB, PL, PU, & SM.) should be space delimited. Read groups should be comma separated, with a space on each side (e.g. ' , '). The ID field must come first for each read group and must match the basename of a fastq file (up to the first period). Expected form: ID:rg1 PU:flowcell1.lane1 SM:sample1 PL:illumina LB:sample1_lib1 , ID:rg2 PU:flowcell1.lane2 SM:sample1 PL:illumina LB:sample1_lib1 read_one_fastqs (Array[File], required ): Input Fastq format file(s) with 1st read in pair to align read_two_fastqs (Array[File], required ): Input Fastq format file(s) with 2nd read in pair to align stardb_tar_gz (File, required ): Database of reference files for the STAR aligner. Can be generated by rnaseq-star-db-build.wdl Optional contaminant_stardb_tar_gz (File?): If using XenoCP to clean contaminant reads, provide a STAR reference for the contaminant genome alignment.disk_size_gb (Int?) picard_sort.disk_size_gb (Int?) xenocp.bwa_aln_align.disk_size_gb (Int?) xenocp.bwa_mem_align.disk_size_gb (Int?) xenocp.cleanse.disk_size_gb (Int?) xenocp.combine_files.disk_size_gb (Int?) xenocp.combine_tie_bam.disk_size_gb (Int?) xenocp.create_contam_list.disk_size_gb (Int?) xenocp.extract_by_chrom.disk_size_gb (Int?) xenocp.final_bam.disk_size_gb (Int?) xenocp.get_chroms.disk_size_gb (Int?) xenocp.mapped_fastq.disk_size_gb (Int?) xenocp.mismatch.disk_size_gb (Int?) xenocp.qc.disk_size_gb (Int?) xenocp.sort.disk_size_gb (Int?) xenocp.star_align.disk_size_gb (Int?) xenocp.star_align.read_groups (String?): A space-delimited read group record for each read group. Exactly one fastq filename must match each read group ID from read_one_fastqs and read_two_fastqs . Read group fields (Required fields: ID, LB, PL, PU, & SM.) should be space delimited. Read groups should be comma separated, with a space on each side (e.g. ' , '). The ID field must come first for each read group and must match the basename of a fastq file (up to the first period). Expected form: ID:rg1 PU:flowcell1.lane1 SM:sample1 PL:illumina LB:sample1_lib1 , ID:rg2 PU:flowcell1.lane2 SM:sample1 PL:illumina LB:sample1_lib1 xenocp.star_align.read_two_fastqs (Array[File]?): Input Fastq format file(s) with 2nd read in pair to align xenocp.tie_sort.disk_size_gb (Int?) xenocp.unmapped.disk_size_gb (Int?) Defaults cleanse_xenograft (Boolean, default=false): For xenograft samples, enable XenoCP cleansing of mouse contamination detect_nproc (Boolean, default=false): Use all available cores for multi-core steps max_retries (Int, default=1): Number of times to retry failed steps strandedness (String, default=\"\"): empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'. If missing, will be inferred validate_input (Boolean, default=true) alignment.memory_gb (Int, default=50) alignment.ncpu (Int, default=1) deeptools_bamCoverage.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps deeptools_bamCoverage.memory_gb (Int, default=5) deeptools_bamCoverage.ncpu (Int, default=1) deeptools_bamCoverage.prefix (String, default=basename(bam,\".bam\")) fqlint.memory_gb (Int, default=8) htseq_count.added_memory_gb (Int, default=20) htseq_count.outfile (String, default=basename(bam,\".bam\") + \".feature-counts.txt\") ngsderive_strandedness.memory_gb (Int, default=5) picard_sort.memory_gb (Int, default=25) picard_sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") picard_sort.sort_order (String, default=\"coordinate\") samtools_index.memory_gb (Int, default=15) samtools_index.ncpu (Int, default=1) samtools_index.outfile (String, default=basename(bam) + \".bai\") validate_bam.ignore_list (Array[String], default=[\"MISSING_PLATFORM_VALUE\", \"INVALID_PLATFORM_VALUE\", \"INVALID_MAPPING_QUALITY\"]) validate_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_bam.max_errors (Int, default=2147483647) validate_bam.memory_gb (Int, default=8) validate_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_bam.succeed_on_errors (Boolean, default=false) validate_bam.succeed_on_warnings (Boolean, default=true) validate_bam.summary_mode (Boolean, default=false) xenocp.n_threads (Int, default=1) xenocp.validation_stringency (String, default=\"SILENT\") xenocp.bwa_aln_align.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.bwa_aln_align.max_retries (Int, default=1): Number of times to retry failed steps xenocp.bwa_aln_align.memory_gb (Int, default=5) xenocp.bwa_aln_align.output_bam (String, default=basename(fastq,\".fq.gz\") + \".bam\") xenocp.bwa_aln_align.read_group (String, default=\"\") xenocp.bwa_mem_align.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.bwa_mem_align.max_retries (Int, default=1): Number of times to retry failed steps xenocp.bwa_mem_align.output_bam (String, default=basename(fastq,\".fq.gz\") + \".bam\") xenocp.bwa_mem_align.read_group (String, default=\"\") xenocp.cleanse.max_retries (Int, default=1): Number of times to retry failed steps xenocp.cleanse.memory_gb (Int, default=7) xenocp.cleanse.output_bam (String, default=basename(input_bam,\".bam\") + \"-xenocp.bam\") xenocp.cleanse.sort_order (String, default=\"coordinate\") xenocp.combine_files.max_retries (Int, default=1): Number of times to retry failed steps xenocp.combine_files.memory_gb (Int, default=1) xenocp.combine_tie_bam.max_retries (Int, default=1): Number of times to retry failed steps xenocp.combine_tie_bam.memory_gb (Int, default=1) xenocp.create_contam_list.max_retries (Int, default=1): Number of times to retry failed steps xenocp.create_contam_list.memory_gb (Int, default=2) xenocp.create_contam_list.output_contam_list (String, default=basename(input_bam,\".bam\") + \".contam.txt\") xenocp.create_contam_list.tie_bam (String, default=basename(input_bam,\".bam\") + \".tie.bam\") xenocp.extract_by_chrom.max_retries (Int, default=1): Number of times to retry failed steps xenocp.extract_by_chrom.memory_gb (Int, default=8) xenocp.final_bam.max_retries (Int, default=1): Number of times to retry failed steps xenocp.final_bam.memory_gb (Int, default=1) xenocp.get_chroms.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.get_chroms.max_retries (Int, default=1): Number of times to retry failed steps xenocp.get_chroms.memory_gb (Int, default=1) xenocp.mapped_fastq.max_retries (Int, default=1): Number of times to retry failed steps xenocp.mapped_fastq.memory_gb (Int, default=1) xenocp.mapped_fastq.output_fastq (String, default=basename(input_bam,\".bam\") + \".fastq\") xenocp.mismatch.max_retries (Int, default=1): Number of times to retry failed steps xenocp.mismatch.memory_gb (Int, default=2) xenocp.qc.max_retries (Int, default=1): Number of times to retry failed steps xenocp.qc.memory_gb (Int, default=1) xenocp.qc.ncpu (Int, default=1) xenocp.qc.status (String, default=\"indexed\") xenocp.sort.max_retries (Int, default=1): Number of times to retry failed steps xenocp.sort.memory_gb (Int, default=25) xenocp.sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") xenocp.star_align.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.star_align.max_retries (Int, default=1): Number of times to retry failed steps xenocp.star_align.memory_gb (Int, default=50) xenocp.tie_sort.max_retries (Int, default=1): Number of times to retry failed steps xenocp.tie_sort.memory_gb (Int, default=25) xenocp.tie_sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") xenocp.unmapped.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.unmapped.max_retries (Int, default=1): Number of times to retry failed steps xenocp.unmapped.memory_gb (Int, default=1) Outputs bam (File) bam_index (File) star_log (File) gene_counts (File) inferred_strandedness (File) bigwig (File) parse_input Inputs Required cleanse_xenograft (Boolean, required ) input_strand (String, required ) Optional contaminant_stardb_tar_gz (File?) Outputs input_check (String)","title":"RNA-Seq Standard from FastQ"},{"location":"workflows/rnaseq-standard-fastq/#rna-seq-standard-from-fastq","text":"This WDL workflow runs the STAR RNA-seq alignment workflow for St. Jude Cloud from fastq input. The workflow takes paired input fastq files. The read pairs are then passed through STAR alignment to generate a BAM file. The BAM is run through several QC steps. Quantification is done using htseq-count.","title":"RNA-Seq Standard from FastQ"},{"location":"workflows/rnaseq-standard-fastq/#licensing","text":"","title":"LICENSING"},{"location":"workflows/rnaseq-standard-fastq/#mit-license","text":"Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/rnaseq-standard-fastq/#rnaseq_standard_fastq","text":"","title":"rnaseq_standard_fastq"},{"location":"workflows/rnaseq-standard-fastq/#inputs","text":"","title":"Inputs"},{"location":"workflows/rnaseq-standard-fastq/#required","text":"gtf (File, required ): GTF feature file output_prefix (String, required ): Prefix for output files read_groups (String, required ): A space-delimited read group record for each read group. Exactly one fastq filename must match each read group ID from read_one_fastqs and read_two_fastqs . Read group fields (Required fields: ID, LB, PL, PU, & SM.) should be space delimited. Read groups should be comma separated, with a space on each side (e.g. ' , '). The ID field must come first for each read group and must match the basename of a fastq file (up to the first period). Expected form: ID:rg1 PU:flowcell1.lane1 SM:sample1 PL:illumina LB:sample1_lib1 , ID:rg2 PU:flowcell1.lane2 SM:sample1 PL:illumina LB:sample1_lib1 read_one_fastqs (Array[File], required ): Input Fastq format file(s) with 1st read in pair to align read_two_fastqs (Array[File], required ): Input Fastq format file(s) with 2nd read in pair to align stardb_tar_gz (File, required ): Database of reference files for the STAR aligner. Can be generated by rnaseq-star-db-build.wdl","title":"Required"},{"location":"workflows/rnaseq-standard-fastq/#optional","text":"contaminant_stardb_tar_gz (File?): If using XenoCP to clean contaminant reads, provide a STAR reference for the contaminant genome alignment.disk_size_gb (Int?) picard_sort.disk_size_gb (Int?) xenocp.bwa_aln_align.disk_size_gb (Int?) xenocp.bwa_mem_align.disk_size_gb (Int?) xenocp.cleanse.disk_size_gb (Int?) xenocp.combine_files.disk_size_gb (Int?) xenocp.combine_tie_bam.disk_size_gb (Int?) xenocp.create_contam_list.disk_size_gb (Int?) xenocp.extract_by_chrom.disk_size_gb (Int?) xenocp.final_bam.disk_size_gb (Int?) xenocp.get_chroms.disk_size_gb (Int?) xenocp.mapped_fastq.disk_size_gb (Int?) xenocp.mismatch.disk_size_gb (Int?) xenocp.qc.disk_size_gb (Int?) xenocp.sort.disk_size_gb (Int?) xenocp.star_align.disk_size_gb (Int?) xenocp.star_align.read_groups (String?): A space-delimited read group record for each read group. Exactly one fastq filename must match each read group ID from read_one_fastqs and read_two_fastqs . Read group fields (Required fields: ID, LB, PL, PU, & SM.) should be space delimited. Read groups should be comma separated, with a space on each side (e.g. ' , '). The ID field must come first for each read group and must match the basename of a fastq file (up to the first period). Expected form: ID:rg1 PU:flowcell1.lane1 SM:sample1 PL:illumina LB:sample1_lib1 , ID:rg2 PU:flowcell1.lane2 SM:sample1 PL:illumina LB:sample1_lib1 xenocp.star_align.read_two_fastqs (Array[File]?): Input Fastq format file(s) with 2nd read in pair to align xenocp.tie_sort.disk_size_gb (Int?) xenocp.unmapped.disk_size_gb (Int?)","title":"Optional"},{"location":"workflows/rnaseq-standard-fastq/#defaults","text":"cleanse_xenograft (Boolean, default=false): For xenograft samples, enable XenoCP cleansing of mouse contamination detect_nproc (Boolean, default=false): Use all available cores for multi-core steps max_retries (Int, default=1): Number of times to retry failed steps strandedness (String, default=\"\"): empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'. If missing, will be inferred validate_input (Boolean, default=true) alignment.memory_gb (Int, default=50) alignment.ncpu (Int, default=1) deeptools_bamCoverage.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps deeptools_bamCoverage.memory_gb (Int, default=5) deeptools_bamCoverage.ncpu (Int, default=1) deeptools_bamCoverage.prefix (String, default=basename(bam,\".bam\")) fqlint.memory_gb (Int, default=8) htseq_count.added_memory_gb (Int, default=20) htseq_count.outfile (String, default=basename(bam,\".bam\") + \".feature-counts.txt\") ngsderive_strandedness.memory_gb (Int, default=5) picard_sort.memory_gb (Int, default=25) picard_sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") picard_sort.sort_order (String, default=\"coordinate\") samtools_index.memory_gb (Int, default=15) samtools_index.ncpu (Int, default=1) samtools_index.outfile (String, default=basename(bam) + \".bai\") validate_bam.ignore_list (Array[String], default=[\"MISSING_PLATFORM_VALUE\", \"INVALID_PLATFORM_VALUE\", \"INVALID_MAPPING_QUALITY\"]) validate_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_bam.max_errors (Int, default=2147483647) validate_bam.memory_gb (Int, default=8) validate_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_bam.succeed_on_errors (Boolean, default=false) validate_bam.succeed_on_warnings (Boolean, default=true) validate_bam.summary_mode (Boolean, default=false) xenocp.n_threads (Int, default=1) xenocp.validation_stringency (String, default=\"SILENT\") xenocp.bwa_aln_align.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.bwa_aln_align.max_retries (Int, default=1): Number of times to retry failed steps xenocp.bwa_aln_align.memory_gb (Int, default=5) xenocp.bwa_aln_align.output_bam (String, default=basename(fastq,\".fq.gz\") + \".bam\") xenocp.bwa_aln_align.read_group (String, default=\"\") xenocp.bwa_mem_align.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.bwa_mem_align.max_retries (Int, default=1): Number of times to retry failed steps xenocp.bwa_mem_align.output_bam (String, default=basename(fastq,\".fq.gz\") + \".bam\") xenocp.bwa_mem_align.read_group (String, default=\"\") xenocp.cleanse.max_retries (Int, default=1): Number of times to retry failed steps xenocp.cleanse.memory_gb (Int, default=7) xenocp.cleanse.output_bam (String, default=basename(input_bam,\".bam\") + \"-xenocp.bam\") xenocp.cleanse.sort_order (String, default=\"coordinate\") xenocp.combine_files.max_retries (Int, default=1): Number of times to retry failed steps xenocp.combine_files.memory_gb (Int, default=1) xenocp.combine_tie_bam.max_retries (Int, default=1): Number of times to retry failed steps xenocp.combine_tie_bam.memory_gb (Int, default=1) xenocp.create_contam_list.max_retries (Int, default=1): Number of times to retry failed steps xenocp.create_contam_list.memory_gb (Int, default=2) xenocp.create_contam_list.output_contam_list (String, default=basename(input_bam,\".bam\") + \".contam.txt\") xenocp.create_contam_list.tie_bam (String, default=basename(input_bam,\".bam\") + \".tie.bam\") xenocp.extract_by_chrom.max_retries (Int, default=1): Number of times to retry failed steps xenocp.extract_by_chrom.memory_gb (Int, default=8) xenocp.final_bam.max_retries (Int, default=1): Number of times to retry failed steps xenocp.final_bam.memory_gb (Int, default=1) xenocp.get_chroms.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.get_chroms.max_retries (Int, default=1): Number of times to retry failed steps xenocp.get_chroms.memory_gb (Int, default=1) xenocp.mapped_fastq.max_retries (Int, default=1): Number of times to retry failed steps xenocp.mapped_fastq.memory_gb (Int, default=1) xenocp.mapped_fastq.output_fastq (String, default=basename(input_bam,\".bam\") + \".fastq\") xenocp.mismatch.max_retries (Int, default=1): Number of times to retry failed steps xenocp.mismatch.memory_gb (Int, default=2) xenocp.qc.max_retries (Int, default=1): Number of times to retry failed steps xenocp.qc.memory_gb (Int, default=1) xenocp.qc.ncpu (Int, default=1) xenocp.qc.status (String, default=\"indexed\") xenocp.sort.max_retries (Int, default=1): Number of times to retry failed steps xenocp.sort.memory_gb (Int, default=25) xenocp.sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") xenocp.star_align.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.star_align.max_retries (Int, default=1): Number of times to retry failed steps xenocp.star_align.memory_gb (Int, default=50) xenocp.tie_sort.max_retries (Int, default=1): Number of times to retry failed steps xenocp.tie_sort.memory_gb (Int, default=25) xenocp.tie_sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") xenocp.unmapped.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.unmapped.max_retries (Int, default=1): Number of times to retry failed steps xenocp.unmapped.memory_gb (Int, default=1)","title":"Defaults"},{"location":"workflows/rnaseq-standard-fastq/#outputs","text":"bam (File) bam_index (File) star_log (File) gene_counts (File) inferred_strandedness (File) bigwig (File)","title":"Outputs"},{"location":"workflows/rnaseq-standard-fastq/#parse_input","text":"","title":"parse_input"},{"location":"workflows/rnaseq-standard-fastq/#inputs_1","text":"","title":"Inputs"},{"location":"workflows/rnaseq-standard-fastq/#required_1","text":"cleanse_xenograft (Boolean, required ) input_strand (String, required )","title":"Required"},{"location":"workflows/rnaseq-standard-fastq/#optional_1","text":"contaminant_stardb_tar_gz (File?)","title":"Optional"},{"location":"workflows/rnaseq-standard-fastq/#outputs_1","text":"input_check (String)","title":"Outputs"},{"location":"workflows/rnaseq-standard/","text":"RNA-Seq Standard This WDL workflow runs the STAR RNA-seq alignment workflow for St. Jude Cloud. The workflow takes an input BAM file and splits it into fastq files for each read in the pair. The read pairs are then passed through STAR alignment to generate a BAM file. In the case of xenograft samples, the resulting BAM can be optionally cleansed with our XenoCP workflow. Quantification is done using htseq-count. Coverage is calculated with DeepTools. Strandedness is inferred using ngsderive. File validation is performed at several steps, including immediately preceeding output. LICENSING MIT License Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. rnaseq_standard Inputs Required gtf (File, required ): GTF feature file input_bam (File, required ): Input BAM format file to quality check stardb_tar_gz (File, required ): Database of reference files for the STAR aligner. Can be generated by rnaseq-star-db-build.wdl Optional contaminant_stardb_tar_gz (File?): If using XenoCP to clean contaminant reads, provide a STAR reference for the contaminant genome alignment.disk_size_gb (Int?) picard_sort.disk_size_gb (Int?) bam_to_fastqs.fqlint_single.read2 (File?) bam_to_fastqs.split.disk_size_gb (Int?) xenocp.bwa_aln_align.disk_size_gb (Int?) xenocp.bwa_mem_align.disk_size_gb (Int?) xenocp.cleanse.disk_size_gb (Int?) xenocp.combine_files.disk_size_gb (Int?) xenocp.combine_tie_bam.disk_size_gb (Int?) xenocp.create_contam_list.disk_size_gb (Int?) xenocp.extract_by_chrom.disk_size_gb (Int?) xenocp.final_bam.disk_size_gb (Int?) xenocp.get_chroms.disk_size_gb (Int?) xenocp.mapped_fastq.disk_size_gb (Int?) xenocp.mismatch.disk_size_gb (Int?) xenocp.qc.disk_size_gb (Int?) xenocp.sort.disk_size_gb (Int?) xenocp.star_align.disk_size_gb (Int?) xenocp.star_align.read_groups (String?) xenocp.star_align.read_two_fastqs (Array[File]?) xenocp.tie_sort.disk_size_gb (Int?) xenocp.unmapped.disk_size_gb (Int?) Defaults cleanse_xenograft (Boolean, default=false): For xenograft samples, enable XenoCP cleansing of mouse contamination detect_nproc (Boolean, default=false): Use all available cores for multi-core steps max_retries (Int, default=1): Number of times to retry failed steps output_prefix (String, default=basename(input_bam,\".bam\")): Prefix for output files strandedness (String, default=\"\"): empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'. If missing, will be inferred subsample_n_reads (Int, default=-1): Only process a random sampling of n reads. <= 0 for processing entire input BAM. validate_input (Boolean, default=true) alignment.memory_gb (Int, default=50) alignment.ncpu (Int, default=1) bam_to_fastqs.bam_to_fastq_memory_gb (Int, default=40) bam_to_fastqs.pairing (String, default=\"Paired-end\") bam_to_fastqs.samtools_sort_ncpu (Int, default=1) deeptools_bamCoverage.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps deeptools_bamCoverage.memory_gb (Int, default=5) deeptools_bamCoverage.ncpu (Int, default=1) deeptools_bamCoverage.prefix (String, default=basename(bam,\".bam\")) get_read_groups.format_for_star (Boolean, default=true) htseq_count.added_memory_gb (Int, default=20) htseq_count.outfile (String, default=basename(bam,\".bam\") + \".feature-counts.txt\") ngsderive_strandedness.memory_gb (Int, default=5) picard_sort.memory_gb (Int, default=25) picard_sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") picard_sort.sort_order (String, default=\"coordinate\") samtools_index.memory_gb (Int, default=15) samtools_index.ncpu (Int, default=1) samtools_index.outfile (String, default=basename(bam) + \".bai\") subsample.ncpu (Int, default=1) subsample.outname (String, default=basename(bam,\".bam\") + \".subsampled.bam\") validate_bam.ignore_list (Array[String], default=[\"MISSING_PLATFORM_VALUE\", \"INVALID_PLATFORM_VALUE\", \"INVALID_MAPPING_QUALITY\"]) validate_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_bam.max_errors (Int, default=2147483647) validate_bam.memory_gb (Int, default=8) validate_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_bam.succeed_on_errors (Boolean, default=false) validate_bam.succeed_on_warnings (Boolean, default=true) validate_bam.summary_mode (Boolean, default=false) validate_input_bam.ignore_list (Array[String], default=[\"MISSING_PLATFORM_VALUE\", \"INVALID_PLATFORM_VALUE\", \"INVALID_MAPPING_QUALITY\"]) validate_input_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_input_bam.max_errors (Int, default=2147483647) validate_input_bam.memory_gb (Int, default=8) validate_input_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_input_bam.succeed_on_errors (Boolean, default=false) validate_input_bam.succeed_on_warnings (Boolean, default=true) validate_input_bam.summary_mode (Boolean, default=false) xenocp.n_threads (Int, default=1) xenocp.validation_stringency (String, default=\"SILENT\") bam_to_fastqs.bam_to_fastq.prefix (String, default=basename(bam,\".bam\")) bam_to_fastqs.fqlint_pair.memory_gb (Int, default=8) bam_to_fastqs.fqlint_single.memory_gb (Int, default=8) bam_to_fastqs.split.prefix (String, default=basename(bam,\".bam\")) bam_to_fastqs.split.reject_unaccounted (Boolean, default=true) xenocp.bwa_aln_align.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.bwa_aln_align.max_retries (Int, default=1): Number of times to retry failed steps xenocp.bwa_aln_align.memory_gb (Int, default=5) xenocp.bwa_aln_align.output_bam (String, default=basename(fastq,\".fq.gz\") + \".bam\") xenocp.bwa_aln_align.read_group (String, default=\"\") xenocp.bwa_mem_align.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.bwa_mem_align.max_retries (Int, default=1): Number of times to retry failed steps xenocp.bwa_mem_align.output_bam (String, default=basename(fastq,\".fq.gz\") + \".bam\") xenocp.bwa_mem_align.read_group (String, default=\"\") xenocp.cleanse.max_retries (Int, default=1): Number of times to retry failed steps xenocp.cleanse.memory_gb (Int, default=7) xenocp.cleanse.output_bam (String, default=basename(input_bam,\".bam\") + \"-xenocp.bam\") xenocp.cleanse.sort_order (String, default=\"coordinate\") xenocp.combine_files.max_retries (Int, default=1): Number of times to retry failed steps xenocp.combine_files.memory_gb (Int, default=1) xenocp.combine_tie_bam.max_retries (Int, default=1): Number of times to retry failed steps xenocp.combine_tie_bam.memory_gb (Int, default=1) xenocp.create_contam_list.max_retries (Int, default=1): Number of times to retry failed steps xenocp.create_contam_list.memory_gb (Int, default=2) xenocp.create_contam_list.output_contam_list (String, default=basename(input_bam,\".bam\") + \".contam.txt\") xenocp.create_contam_list.tie_bam (String, default=basename(input_bam,\".bam\") + \".tie.bam\") xenocp.extract_by_chrom.max_retries (Int, default=1): Number of times to retry failed steps xenocp.extract_by_chrom.memory_gb (Int, default=8) xenocp.final_bam.max_retries (Int, default=1): Number of times to retry failed steps xenocp.final_bam.memory_gb (Int, default=1) xenocp.get_chroms.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.get_chroms.max_retries (Int, default=1): Number of times to retry failed steps xenocp.get_chroms.memory_gb (Int, default=1) xenocp.mapped_fastq.max_retries (Int, default=1): Number of times to retry failed steps xenocp.mapped_fastq.memory_gb (Int, default=1) xenocp.mapped_fastq.output_fastq (String, default=basename(input_bam,\".bam\") + \".fastq\") xenocp.mismatch.max_retries (Int, default=1): Number of times to retry failed steps xenocp.mismatch.memory_gb (Int, default=2) xenocp.qc.max_retries (Int, default=1): Number of times to retry failed steps xenocp.qc.memory_gb (Int, default=1) xenocp.qc.ncpu (Int, default=1) xenocp.qc.status (String, default=\"indexed\") xenocp.sort.max_retries (Int, default=1): Number of times to retry failed steps xenocp.sort.memory_gb (Int, default=25) xenocp.sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") xenocp.star_align.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.star_align.max_retries (Int, default=1): Number of times to retry failed steps xenocp.star_align.memory_gb (Int, default=50) xenocp.tie_sort.max_retries (Int, default=1): Number of times to retry failed steps xenocp.tie_sort.memory_gb (Int, default=25) xenocp.tie_sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") xenocp.unmapped.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.unmapped.max_retries (Int, default=1): Number of times to retry failed steps xenocp.unmapped.memory_gb (Int, default=1) Outputs bam (File) bam_index (File) star_log (File) gene_counts (File) inferred_strandedness (File) bigwig (File) parse_input Inputs Required cleanse_xenograft (Boolean, required ) input_strand (String, required ) Optional contaminant_stardb_tar_gz (File?) Outputs input_check (String)","title":"RNA-Seq Standard"},{"location":"workflows/rnaseq-standard/#rna-seq-standard","text":"This WDL workflow runs the STAR RNA-seq alignment workflow for St. Jude Cloud. The workflow takes an input BAM file and splits it into fastq files for each read in the pair. The read pairs are then passed through STAR alignment to generate a BAM file. In the case of xenograft samples, the resulting BAM can be optionally cleansed with our XenoCP workflow. Quantification is done using htseq-count. Coverage is calculated with DeepTools. Strandedness is inferred using ngsderive. File validation is performed at several steps, including immediately preceeding output.","title":"RNA-Seq Standard"},{"location":"workflows/rnaseq-standard/#licensing","text":"","title":"LICENSING"},{"location":"workflows/rnaseq-standard/#mit-license","text":"Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/rnaseq-standard/#rnaseq_standard","text":"","title":"rnaseq_standard"},{"location":"workflows/rnaseq-standard/#inputs","text":"","title":"Inputs"},{"location":"workflows/rnaseq-standard/#required","text":"gtf (File, required ): GTF feature file input_bam (File, required ): Input BAM format file to quality check stardb_tar_gz (File, required ): Database of reference files for the STAR aligner. Can be generated by rnaseq-star-db-build.wdl","title":"Required"},{"location":"workflows/rnaseq-standard/#optional","text":"contaminant_stardb_tar_gz (File?): If using XenoCP to clean contaminant reads, provide a STAR reference for the contaminant genome alignment.disk_size_gb (Int?) picard_sort.disk_size_gb (Int?) bam_to_fastqs.fqlint_single.read2 (File?) bam_to_fastqs.split.disk_size_gb (Int?) xenocp.bwa_aln_align.disk_size_gb (Int?) xenocp.bwa_mem_align.disk_size_gb (Int?) xenocp.cleanse.disk_size_gb (Int?) xenocp.combine_files.disk_size_gb (Int?) xenocp.combine_tie_bam.disk_size_gb (Int?) xenocp.create_contam_list.disk_size_gb (Int?) xenocp.extract_by_chrom.disk_size_gb (Int?) xenocp.final_bam.disk_size_gb (Int?) xenocp.get_chroms.disk_size_gb (Int?) xenocp.mapped_fastq.disk_size_gb (Int?) xenocp.mismatch.disk_size_gb (Int?) xenocp.qc.disk_size_gb (Int?) xenocp.sort.disk_size_gb (Int?) xenocp.star_align.disk_size_gb (Int?) xenocp.star_align.read_groups (String?) xenocp.star_align.read_two_fastqs (Array[File]?) xenocp.tie_sort.disk_size_gb (Int?) xenocp.unmapped.disk_size_gb (Int?)","title":"Optional"},{"location":"workflows/rnaseq-standard/#defaults","text":"cleanse_xenograft (Boolean, default=false): For xenograft samples, enable XenoCP cleansing of mouse contamination detect_nproc (Boolean, default=false): Use all available cores for multi-core steps max_retries (Int, default=1): Number of times to retry failed steps output_prefix (String, default=basename(input_bam,\".bam\")): Prefix for output files strandedness (String, default=\"\"): empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'. If missing, will be inferred subsample_n_reads (Int, default=-1): Only process a random sampling of n reads. <= 0 for processing entire input BAM. validate_input (Boolean, default=true) alignment.memory_gb (Int, default=50) alignment.ncpu (Int, default=1) bam_to_fastqs.bam_to_fastq_memory_gb (Int, default=40) bam_to_fastqs.pairing (String, default=\"Paired-end\") bam_to_fastqs.samtools_sort_ncpu (Int, default=1) deeptools_bamCoverage.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps deeptools_bamCoverage.memory_gb (Int, default=5) deeptools_bamCoverage.ncpu (Int, default=1) deeptools_bamCoverage.prefix (String, default=basename(bam,\".bam\")) get_read_groups.format_for_star (Boolean, default=true) htseq_count.added_memory_gb (Int, default=20) htseq_count.outfile (String, default=basename(bam,\".bam\") + \".feature-counts.txt\") ngsderive_strandedness.memory_gb (Int, default=5) picard_sort.memory_gb (Int, default=25) picard_sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") picard_sort.sort_order (String, default=\"coordinate\") samtools_index.memory_gb (Int, default=15) samtools_index.ncpu (Int, default=1) samtools_index.outfile (String, default=basename(bam) + \".bai\") subsample.ncpu (Int, default=1) subsample.outname (String, default=basename(bam,\".bam\") + \".subsampled.bam\") validate_bam.ignore_list (Array[String], default=[\"MISSING_PLATFORM_VALUE\", \"INVALID_PLATFORM_VALUE\", \"INVALID_MAPPING_QUALITY\"]) validate_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_bam.max_errors (Int, default=2147483647) validate_bam.memory_gb (Int, default=8) validate_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_bam.succeed_on_errors (Boolean, default=false) validate_bam.succeed_on_warnings (Boolean, default=true) validate_bam.summary_mode (Boolean, default=false) validate_input_bam.ignore_list (Array[String], default=[\"MISSING_PLATFORM_VALUE\", \"INVALID_PLATFORM_VALUE\", \"INVALID_MAPPING_QUALITY\"]) validate_input_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_input_bam.max_errors (Int, default=2147483647) validate_input_bam.memory_gb (Int, default=8) validate_input_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_input_bam.succeed_on_errors (Boolean, default=false) validate_input_bam.succeed_on_warnings (Boolean, default=true) validate_input_bam.summary_mode (Boolean, default=false) xenocp.n_threads (Int, default=1) xenocp.validation_stringency (String, default=\"SILENT\") bam_to_fastqs.bam_to_fastq.prefix (String, default=basename(bam,\".bam\")) bam_to_fastqs.fqlint_pair.memory_gb (Int, default=8) bam_to_fastqs.fqlint_single.memory_gb (Int, default=8) bam_to_fastqs.split.prefix (String, default=basename(bam,\".bam\")) bam_to_fastqs.split.reject_unaccounted (Boolean, default=true) xenocp.bwa_aln_align.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.bwa_aln_align.max_retries (Int, default=1): Number of times to retry failed steps xenocp.bwa_aln_align.memory_gb (Int, default=5) xenocp.bwa_aln_align.output_bam (String, default=basename(fastq,\".fq.gz\") + \".bam\") xenocp.bwa_aln_align.read_group (String, default=\"\") xenocp.bwa_mem_align.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.bwa_mem_align.max_retries (Int, default=1): Number of times to retry failed steps xenocp.bwa_mem_align.output_bam (String, default=basename(fastq,\".fq.gz\") + \".bam\") xenocp.bwa_mem_align.read_group (String, default=\"\") xenocp.cleanse.max_retries (Int, default=1): Number of times to retry failed steps xenocp.cleanse.memory_gb (Int, default=7) xenocp.cleanse.output_bam (String, default=basename(input_bam,\".bam\") + \"-xenocp.bam\") xenocp.cleanse.sort_order (String, default=\"coordinate\") xenocp.combine_files.max_retries (Int, default=1): Number of times to retry failed steps xenocp.combine_files.memory_gb (Int, default=1) xenocp.combine_tie_bam.max_retries (Int, default=1): Number of times to retry failed steps xenocp.combine_tie_bam.memory_gb (Int, default=1) xenocp.create_contam_list.max_retries (Int, default=1): Number of times to retry failed steps xenocp.create_contam_list.memory_gb (Int, default=2) xenocp.create_contam_list.output_contam_list (String, default=basename(input_bam,\".bam\") + \".contam.txt\") xenocp.create_contam_list.tie_bam (String, default=basename(input_bam,\".bam\") + \".tie.bam\") xenocp.extract_by_chrom.max_retries (Int, default=1): Number of times to retry failed steps xenocp.extract_by_chrom.memory_gb (Int, default=8) xenocp.final_bam.max_retries (Int, default=1): Number of times to retry failed steps xenocp.final_bam.memory_gb (Int, default=1) xenocp.get_chroms.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.get_chroms.max_retries (Int, default=1): Number of times to retry failed steps xenocp.get_chroms.memory_gb (Int, default=1) xenocp.mapped_fastq.max_retries (Int, default=1): Number of times to retry failed steps xenocp.mapped_fastq.memory_gb (Int, default=1) xenocp.mapped_fastq.output_fastq (String, default=basename(input_bam,\".bam\") + \".fastq\") xenocp.mismatch.max_retries (Int, default=1): Number of times to retry failed steps xenocp.mismatch.memory_gb (Int, default=2) xenocp.qc.max_retries (Int, default=1): Number of times to retry failed steps xenocp.qc.memory_gb (Int, default=1) xenocp.qc.ncpu (Int, default=1) xenocp.qc.status (String, default=\"indexed\") xenocp.sort.max_retries (Int, default=1): Number of times to retry failed steps xenocp.sort.memory_gb (Int, default=25) xenocp.sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") xenocp.star_align.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.star_align.max_retries (Int, default=1): Number of times to retry failed steps xenocp.star_align.memory_gb (Int, default=50) xenocp.tie_sort.max_retries (Int, default=1): Number of times to retry failed steps xenocp.tie_sort.memory_gb (Int, default=25) xenocp.tie_sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") xenocp.unmapped.detect_nproc (Boolean, default=false): Use all available cores for multi-core steps xenocp.unmapped.max_retries (Int, default=1): Number of times to retry failed steps xenocp.unmapped.memory_gb (Int, default=1)","title":"Defaults"},{"location":"workflows/rnaseq-standard/#outputs","text":"bam (File) bam_index (File) star_log (File) gene_counts (File) inferred_strandedness (File) bigwig (File)","title":"Outputs"},{"location":"workflows/rnaseq-standard/#parse_input","text":"","title":"parse_input"},{"location":"workflows/rnaseq-standard/#inputs_1","text":"","title":"Inputs"},{"location":"workflows/rnaseq-standard/#required_1","text":"cleanse_xenograft (Boolean, required ) input_strand (String, required )","title":"Required"},{"location":"workflows/rnaseq-standard/#optional_1","text":"contaminant_stardb_tar_gz (File?)","title":"Optional"},{"location":"workflows/rnaseq-standard/#outputs_1","text":"input_check (String)","title":"Outputs"},{"location":"workflows/rnaseq-star-db-build/","text":"RNASeq STAR DB build This WDL workflow generates a set of genome reference files usable by the STAR aligner from an input reference file in FASTA format. Output reference_fa the reference FASTA file gtf the reference GTF file stardb_tar_gz the STAR DB folder in .tar.gz format LICENSING MIT License Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. rnaseq_star_db_build Inputs Required gtf_name (String, required ): Name of output GTF file gtf_url (String, required ): URL to retrieve the reference GTF file from reference_fa_name (String, required ): Name of output reference FASTA file reference_fa_url (String, required ): URL to retrieve the reference FASTA file from Optional build_star_db.disk_size_gb (Int?) Defaults build_star_db.detect_nproc (Boolean, default=false) build_star_db.max_retries (Int, default=1) build_star_db.memory_gb (Int, default=50) build_star_db.ram_limit (String, default=\"45000000000\") gtf_download.disk_size_GB (Int, default=10) gtf_download.max_retries (Int, default=1) reference_download.disk_size_GB (Int, default=10) reference_download.max_retries (Int, default=1) Outputs reference_fa (File) gtf (File) stardb_tar_gz (File)","title":"RNASeq STAR DB build"},{"location":"workflows/rnaseq-star-db-build/#rnaseq-star-db-build","text":"This WDL workflow generates a set of genome reference files usable by the STAR aligner from an input reference file in FASTA format.","title":"RNASeq STAR DB build"},{"location":"workflows/rnaseq-star-db-build/#output","text":"reference_fa the reference FASTA file gtf the reference GTF file stardb_tar_gz the STAR DB folder in .tar.gz format","title":"Output"},{"location":"workflows/rnaseq-star-db-build/#licensing","text":"","title":"LICENSING"},{"location":"workflows/rnaseq-star-db-build/#mit-license","text":"Copyright 2020-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/rnaseq-star-db-build/#rnaseq_star_db_build","text":"","title":"rnaseq_star_db_build"},{"location":"workflows/rnaseq-star-db-build/#inputs","text":"","title":"Inputs"},{"location":"workflows/rnaseq-star-db-build/#required","text":"gtf_name (String, required ): Name of output GTF file gtf_url (String, required ): URL to retrieve the reference GTF file from reference_fa_name (String, required ): Name of output reference FASTA file reference_fa_url (String, required ): URL to retrieve the reference FASTA file from","title":"Required"},{"location":"workflows/rnaseq-star-db-build/#optional","text":"build_star_db.disk_size_gb (Int?)","title":"Optional"},{"location":"workflows/rnaseq-star-db-build/#defaults","text":"build_star_db.detect_nproc (Boolean, default=false) build_star_db.max_retries (Int, default=1) build_star_db.memory_gb (Int, default=50) build_star_db.ram_limit (String, default=\"45000000000\") gtf_download.disk_size_GB (Int, default=10) gtf_download.max_retries (Int, default=1) reference_download.disk_size_GB (Int, default=10) reference_download.max_retries (Int, default=1)","title":"Defaults"},{"location":"workflows/rnaseq-star-db-build/#outputs","text":"reference_fa (File) gtf (File) stardb_tar_gz (File)","title":"Outputs"},{"location":"workflows/scrnaseq-standard/","text":"scRNA-Seq Standard This WDL workflow runs the Cell Ranger scRNA-seq alignment workflow for St. Jude Cloud. The workflow takes an input BAM file and splits it into fastq files for each read in the pair. The read pairs are then passed through Cell Ranger to generate a BAM file and perform quantification. Strandedness is inferred using ngsderive. File validation is performed at several steps, including immediately preceeding output. LICENSING MIT License Copyright 2022-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. scrnaseq_standard Inputs Required gtf (File, required ) input_bam (File, required ): Input BAM format file to quality check transcriptome_tar_gz (File, required ): Database of reference files for Cell Ranger. Can be downloaded from 10x Genomics Optional cell_ranger_bam_to_fastqs.fqlint_single.read2 (File?) Defaults detect_nproc (Boolean, default=false): Use all available cores for multi-core steps max_retries (Int, default=1): Number of times to retry failed steps output_prefix (String, default=basename(input_bam,\".bam\")): Prefix for output files strandedness (String, default=\"\"): empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'. If missing, will be inferred subsample_n_reads (Int, default=-1): Only process a random sampling of n reads. <= 0 for processing entire input BAM. validate_input (Boolean, default=true) cell_ranger_bam_to_fastqs.bam_to_fastq_memory_gb (Int, default=40) cell_ranger_bam_to_fastqs.pairing (String, default=\"Paired-end\") cell_ranger_bam_to_fastqs.samtools_sort_ncpu (Int, default=1) cell_ranger_bam_to_fastqs.split_output_format (String, default=\"%*_%!.%.\") count.cpu (Int, default=8) count.jobmode (String, default=\"local\") count.memory_gb (Int, default=16) ngsderive_strandedness.memory_gb (Int, default=5) subsample.ncpu (Int, default=1) subsample.outname (String, default=basename(bam,\".bam\") + \".subsampled.bam\") validate_bam.ignore_list (Array[String], default=[\"MISSING_PLATFORM_VALUE\", \"INVALID_PLATFORM_VALUE\", \"INVALID_MAPPING_QUALITY\"]) validate_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_bam.max_errors (Int, default=2147483647) validate_bam.memory_gb (Int, default=8) validate_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_bam.succeed_on_errors (Boolean, default=false) validate_bam.succeed_on_warnings (Boolean, default=true) validate_bam.summary_mode (Boolean, default=false) validate_input_bam.ignore_list (Array[String], default=[\"MISSING_PLATFORM_VALUE\", \"INVALID_PLATFORM_VALUE\", \"INVALID_MAPPING_QUALITY\"]) validate_input_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_input_bam.max_errors (Int, default=2147483647) validate_input_bam.memory_gb (Int, default=8) validate_input_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_input_bam.succeed_on_errors (Boolean, default=false) validate_input_bam.succeed_on_warnings (Boolean, default=true) validate_input_bam.summary_mode (Boolean, default=false) cell_ranger_bam_to_fastqs.bamtofastq.cellranger11 (Boolean, default=false) cell_ranger_bam_to_fastqs.bamtofastq.gemcode (Boolean, default=false) cell_ranger_bam_to_fastqs.bamtofastq.longranger20 (Boolean, default=false) cell_ranger_bam_to_fastqs.bamtofastq.max_retries (Int, default=1): Number of times to retry failed steps cell_ranger_bam_to_fastqs.bamtofastq.memory_gb (Int, default=8) cell_ranger_bam_to_fastqs.bamtofastq.ncpu (Int, default=4) cell_ranger_bam_to_fastqs.fqlint_pair.memory_gb (Int, default=8) cell_ranger_bam_to_fastqs.fqlint_single.memory_gb (Int, default=8) Outputs bam (File) bam_index (File) qc (File) barcodes (File) features (File) matrix (File) filtered_gene_h5 (File) raw_gene_h5 (File) raw_barcodes (File) raw_features (File) raw_matrix (File) mol_info_h5 (File) web_summary (File) inferred_strandedness (File) parse_input Inputs Required input_strand (String, required ) Outputs input_check (String)","title":"Scrnaseq standard"},{"location":"workflows/scrnaseq-standard/#licensing","text":"","title":"LICENSING"},{"location":"workflows/scrnaseq-standard/#mit-license","text":"Copyright 2022-Present St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/scrnaseq-standard/#scrnaseq_standard","text":"","title":"scrnaseq_standard"},{"location":"workflows/scrnaseq-standard/#inputs","text":"","title":"Inputs"},{"location":"workflows/scrnaseq-standard/#required","text":"gtf (File, required ) input_bam (File, required ): Input BAM format file to quality check transcriptome_tar_gz (File, required ): Database of reference files for Cell Ranger. Can be downloaded from 10x Genomics","title":"Required"},{"location":"workflows/scrnaseq-standard/#optional","text":"cell_ranger_bam_to_fastqs.fqlint_single.read2 (File?)","title":"Optional"},{"location":"workflows/scrnaseq-standard/#defaults","text":"detect_nproc (Boolean, default=false): Use all available cores for multi-core steps max_retries (Int, default=1): Number of times to retry failed steps output_prefix (String, default=basename(input_bam,\".bam\")): Prefix for output files strandedness (String, default=\"\"): empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'. If missing, will be inferred subsample_n_reads (Int, default=-1): Only process a random sampling of n reads. <= 0 for processing entire input BAM. validate_input (Boolean, default=true) cell_ranger_bam_to_fastqs.bam_to_fastq_memory_gb (Int, default=40) cell_ranger_bam_to_fastqs.pairing (String, default=\"Paired-end\") cell_ranger_bam_to_fastqs.samtools_sort_ncpu (Int, default=1) cell_ranger_bam_to_fastqs.split_output_format (String, default=\"%*_%!.%.\") count.cpu (Int, default=8) count.jobmode (String, default=\"local\") count.memory_gb (Int, default=16) ngsderive_strandedness.memory_gb (Int, default=5) subsample.ncpu (Int, default=1) subsample.outname (String, default=basename(bam,\".bam\") + \".subsampled.bam\") validate_bam.ignore_list (Array[String], default=[\"MISSING_PLATFORM_VALUE\", \"INVALID_PLATFORM_VALUE\", \"INVALID_MAPPING_QUALITY\"]) validate_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_bam.max_errors (Int, default=2147483647) validate_bam.memory_gb (Int, default=8) validate_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_bam.succeed_on_errors (Boolean, default=false) validate_bam.succeed_on_warnings (Boolean, default=true) validate_bam.summary_mode (Boolean, default=false) validate_input_bam.ignore_list (Array[String], default=[\"MISSING_PLATFORM_VALUE\", \"INVALID_PLATFORM_VALUE\", \"INVALID_MAPPING_QUALITY\"]) validate_input_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_input_bam.max_errors (Int, default=2147483647) validate_input_bam.memory_gb (Int, default=8) validate_input_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_input_bam.succeed_on_errors (Boolean, default=false) validate_input_bam.succeed_on_warnings (Boolean, default=true) validate_input_bam.summary_mode (Boolean, default=false) cell_ranger_bam_to_fastqs.bamtofastq.cellranger11 (Boolean, default=false) cell_ranger_bam_to_fastqs.bamtofastq.gemcode (Boolean, default=false) cell_ranger_bam_to_fastqs.bamtofastq.longranger20 (Boolean, default=false) cell_ranger_bam_to_fastqs.bamtofastq.max_retries (Int, default=1): Number of times to retry failed steps cell_ranger_bam_to_fastqs.bamtofastq.memory_gb (Int, default=8) cell_ranger_bam_to_fastqs.bamtofastq.ncpu (Int, default=4) cell_ranger_bam_to_fastqs.fqlint_pair.memory_gb (Int, default=8) cell_ranger_bam_to_fastqs.fqlint_single.memory_gb (Int, default=8)","title":"Defaults"},{"location":"workflows/scrnaseq-standard/#outputs","text":"bam (File) bam_index (File) qc (File) barcodes (File) features (File) matrix (File) filtered_gene_h5 (File) raw_gene_h5 (File) raw_barcodes (File) raw_features (File) raw_matrix (File) mol_info_h5 (File) web_summary (File) inferred_strandedness (File)","title":"Outputs"},{"location":"workflows/scrnaseq-standard/#parse_input","text":"","title":"parse_input"},{"location":"workflows/scrnaseq-standard/#inputs_1","text":"","title":"Inputs"},{"location":"workflows/scrnaseq-standard/#required_1","text":"input_strand (String, required )","title":"Required"},{"location":"workflows/scrnaseq-standard/#outputs_1","text":"input_check (String)","title":"Outputs"}]}